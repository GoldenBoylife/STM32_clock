
200329_I2C_HHD2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e5c  08006e5c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08006e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200000dc  08006f40  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006f40  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001447e  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ba5  00000000  00000000  0003458a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  00037130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  000383e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026962  00000000  00000000  00039548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f57e  00000000  00000000  0005feaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6ce1  00000000  00000000  0006f428  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005760  00000000  00000000  00156184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c40 	.word	0x08006c40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	08006c40 	.word	0x08006c40

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LCD_SendInternal>:
#define BACKLIGHT (1 << 3)

extern I2C_HandleTypeDef hi2c1;

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	460b      	mov	r3, r1
 800059c:	71bb      	strb	r3, [r7, #6]
 800059e:	4613      	mov	r3, r2
 80005a0:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;

    for(;;)
    {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, 0xFF);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	b299      	uxth	r1, r3
 80005a6:	23ff      	movs	r3, #255	; 0xff
 80005a8:	2201      	movs	r2, #1
 80005aa:	4822      	ldr	r0, [pc, #136]	; (8000634 <LCD_SendInternal+0xa4>)
 80005ac:	f002 fc16 	bl	8002ddc <HAL_I2C_IsDeviceReady>
 80005b0:	4603      	mov	r3, r0
 80005b2:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)  break;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d000      	beq.n	80005bc <LCD_SendInternal+0x2c>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, 0xFF);
 80005ba:	e7f2      	b.n	80005a2 <LCD_SendInternal+0x12>
        if(res == HAL_OK)  break;
 80005bc:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80005cc:	7bba      	ldrb	r2, [r7, #14]
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f043 030c 	orr.w	r3, r3, #12
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80005dc:	7bba      	ldrb	r2, [r7, #14]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80005ec:	7b7a      	ldrb	r2, [r7, #13]
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f043 030c 	orr.w	r3, r3, #12
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80005fc:	7b7a      	ldrb	r2, [r7, #13]
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	4313      	orrs	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), 0xFF);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b299      	uxth	r1, r3
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	23ff      	movs	r3, #255	; 0xff
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2304      	movs	r3, #4
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <LCD_SendInternal+0xa4>)
 800061c:	f002 fae0 	bl	8002be0 <HAL_I2C_Master_Transmit>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(5);
 8000624:	2005      	movs	r0, #5
 8000626:	f001 f93f 	bl	80018a8 <HAL_Delay>
    return res;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000164 	.word	0x20000164

08000638 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	4613      	mov	r3, r2
 8000646:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000648:	79b9      	ldrb	r1, [r7, #6]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2200      	movs	r2, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff9e 	bl	8000590 <LCD_SendInternal>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	460a      	mov	r2, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 800066c:	79b9      	ldrb	r1, [r7, #6]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2201      	movs	r2, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff8c 	bl	8000590 <LCD_SendInternal>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    LCD_SendCommand(lcd_addr, 0x30);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2130      	movs	r1, #48	; 0x30
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffd2 	bl	8000638 <LCD_SendCommand>
    LCD_SendCommand(lcd_addr, 0x02);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2102      	movs	r1, #2
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffcd 	bl	8000638 <LCD_SendCommand>
    LCD_SendCommand(lcd_addr, 0x0C);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	210c      	movs	r1, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffc8 	bl	8000638 <LCD_SendCommand>
    LCD_SendCommand(lcd_addr, 0x01);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffc3 	bl	8000638 <LCD_SendCommand>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	6039      	str	r1, [r7, #0]
 80006c4:	71fb      	strb	r3, [r7, #7]
    while(*str)
 80006c6:	e009      	b.n	80006dc <LCD_SendString+0x22>
    {
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffc3 	bl	800065c <LCD_SendData>
        str++;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
    while(*str)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f1      	bne.n	80006c8 <LCD_SendString+0xe>
    }
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <ADC_MODULE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_MODULE()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <ADC_MODULE+0x24>)
 80006f2:	f001 f93f 	bl	8001974 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80006f6:	210a      	movs	r1, #10
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <ADC_MODULE+0x24>)
 80006fa:	f001 fa01 	bl	8001b00 <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <ADC_MODULE+0x24>)
 8000700:	f001 fbc3 	bl	8001e8a <HAL_ADC_GetValue>
 8000704:	4602      	mov	r2, r0
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <ADC_MODULE+0x28>)
 8000708:	601a      	str	r2, [r3, #0]
	//HAL_ADC_Stop(&hadc1);  //이거 왜 넣은거지??
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001d0 	.word	0x200001d0
 8000714:	200000f8 	.word	0x200000f8

08000718 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000728:	d137      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if((timer_count%10)==0)
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800072c:	6819      	ldr	r1, [r3, #0]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000730:	fb83 2301 	smull	r2, r3, r3, r1
 8000734:	109a      	asrs	r2, r3, #2
 8000736:	17cb      	asrs	r3, r1, #31
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	1aca      	subs	r2, r1, r3
 8000744:	2a00      	cmp	r2, #0
 8000746:	d123      	bne.n	8000790 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			//printf("1초마다 실행되어야 하는 타이머 카운터\n");
			////1초마다 실행 될것.
			sec_now++; // 1초가 지남
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000750:	6013      	str	r3, [r2, #0]
			if(sec_now > 59)
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b3b      	cmp	r3, #59	; 0x3b
 8000758:	d907      	bls.n	800076a <HAL_TIM_PeriodElapsedCallback+0x52>
				{
				sec_now =0;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
				min_now++;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000768:	6013      	str	r3, [r2, #0]
				}
			if(min_now > 59)
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b3b      	cmp	r3, #59	; 0x3b
 8000770:	d907      	bls.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x6a>
			{
				min_now =0;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
				hour_now++;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000780:	6013      	str	r3, [r2, #0]
			}
			if(hour_now >23)
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b17      	cmp	r3, #23
 8000788:	d902      	bls.n	8000790 <HAL_TIM_PeriodElapsedCallback+0x78>
				hour_now =0;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]

		}
		timer_count++;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000798:	6013      	str	r3, [r2, #0]
	}
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000028c 	.word	0x2000028c
 80007ac:	66666667 	.word	0x66666667
 80007b0:	20000108 	.word	0x20000108
 80007b4:	20000104 	.word	0x20000104
 80007b8:	20000100 	.word	0x20000100

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 ffff 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 faaf 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fc65 	bl	8001098 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ce:	f000 fc39 	bl	8001044 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80007d2:	f000 fb31 	bl	8000e38 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007d6:	f000 fb81 	bl	8000edc <MX_I2C1_Init>
  MX_RTC_Init();
 80007da:	f000 fbbf 	bl	8000f5c <MX_RTC_Init>
  MX_TIM2_Init();
 80007de:	f000 fbe3 	bl	8000fa8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim2);
 80007e2:	48a6      	ldr	r0, [pc, #664]	; (8000a7c <main+0x2c0>)
 80007e4:	f003 fe01 	bl	80043ea <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80007e8:	48a4      	ldr	r0, [pc, #656]	; (8000a7c <main+0x2c0>)
 80007ea:	f003 fe29 	bl	8004440 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);   //이게 있어야 ADC인터럽트 시작 가능
 80007ee:	48a4      	ldr	r0, [pc, #656]	; (8000a80 <main+0x2c4>)
 80007f0:	f001 f8c0 	bl	8001974 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init(LCD_ADDR);
 80007f4:	204e      	movs	r0, #78	; 0x4e
 80007f6:	f7ff ff43 	bl	8000680 <LCD_Init>
  while (1)
  {
		ADC_MODULE();
 80007fa:	f7ff ff77 	bl	80006ec <ADC_MODULE>
		//@ LCD첫번째 줄 출력



		if(mode ==0)
 80007fe:	4ba1      	ldr	r3, [pc, #644]	; (8000a84 <main+0x2c8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 80e6 	bne.w	80009d4 <main+0x218>
		{

			LCD_SendCommand(LCD_ADDR, 0x80);		//lcd의 첫째줄
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	204e      	movs	r0, #78	; 0x4e
 800080c:	f7ff ff14 	bl	8000638 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, "GoldenBoy Clock ");
 8000810:	499d      	ldr	r1, [pc, #628]	; (8000a88 <main+0x2cc>)
 8000812:	204e      	movs	r0, #78	; 0x4e
 8000814:	f7ff ff51 	bl	80006ba <LCD_SendString>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_SET)
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	489b      	ldr	r0, [pc, #620]	; (8000a8c <main+0x2d0>)
 800081e:	f002 f875 	bl	800290c <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d104      	bne.n	8000832 <main+0x76>
					mode++;
 8000828:	4b96      	ldr	r3, [pc, #600]	; (8000a84 <main+0x2c8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a95      	ldr	r2, [pc, #596]	; (8000a84 <main+0x2c8>)
 8000830:	6013      	str	r3, [r2, #0]
					mode++;
					mode_count =0;
					break; //모드0 나감
				}
*/
			if(posit == 1 )  //posi가 0이면  hour 위치
 8000832:	4b97      	ldr	r3, [pc, #604]	; (8000a90 <main+0x2d4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d158      	bne.n	80008ec <main+0x130>
			{

				switch(adc_val)
 800083a:	4b96      	ldr	r3, [pc, #600]	; (8000a94 <main+0x2d8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000842:	d805      	bhi.n	8000850 <main+0x94>
 8000844:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000848:	d214      	bcs.n	8000874 <main+0xb8>
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d826      	bhi.n	800089c <main+0xe0>
 800084e:	e00b      	b.n	8000868 <main+0xac>
 8000850:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000854:	d322      	bcc.n	800089c <main+0xe0>
 8000856:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800085a:	d911      	bls.n	8000880 <main+0xc4>
 800085c:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8000860:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000864:	d81a      	bhi.n	800089c <main+0xe0>
 8000866:	e012      	b.n	800088e <main+0xd2>
					{
					case 0 ... 10 :
						hour_now++;
 8000868:	4b8b      	ldr	r3, [pc, #556]	; (8000a98 <main+0x2dc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a8a      	ldr	r2, [pc, #552]	; (8000a98 <main+0x2dc>)
 8000870:	6013      	str	r3, [r2, #0]
						break;
 8000872:	e013      	b.n	800089c <main+0xe0>
					case 800 ... 900 :
						hour_now--;  //시 감소
 8000874:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <main+0x2dc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	4a87      	ldr	r2, [pc, #540]	; (8000a98 <main+0x2dc>)
 800087c:	6013      	str	r3, [r2, #0]
						break;
 800087e:	e00d      	b.n	800089c <main+0xe0>
					case 1800 ... 2000 :
						posit = 5;
 8000880:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <main+0x2d4>)
 8000882:	2205      	movs	r2, #5
 8000884:	601a      	str	r2, [r3, #0]
						printf("hour, left 눌림\n");
 8000886:	4885      	ldr	r0, [pc, #532]	; (8000a9c <main+0x2e0>)
 8000888:	f005 f942 	bl	8005b10 <puts>
						break;
 800088c:	e006      	b.n	800089c <main+0xe0>
					case 2600 ... 3000 :
						posit = 5;
 800088e:	4b80      	ldr	r3, [pc, #512]	; (8000a90 <main+0x2d4>)
 8000890:	2205      	movs	r2, #5
 8000892:	601a      	str	r2, [r3, #0]
						printf("hour, right 눌림\n");
 8000894:	4882      	ldr	r0, [pc, #520]	; (8000aa0 <main+0x2e4>)
 8000896:	f005 f93b 	bl	8005b10 <puts>
						break;
 800089a:	bf00      	nop

					}
				if(hour_now < 12)
 800089c:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <main+0x2dc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d80c      	bhi.n	80008be <main+0x102>
					sprintf(now_time, " AM %02d: %02d: %02d  ", hour_now ,min_now, sec_now);
 80008a4:	4b7c      	ldr	r3, [pc, #496]	; (8000a98 <main+0x2dc>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <main+0x2e8>)
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	4b7e      	ldr	r3, [pc, #504]	; (8000aa8 <main+0x2ec>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	460b      	mov	r3, r1
 80008b4:	497d      	ldr	r1, [pc, #500]	; (8000aac <main+0x2f0>)
 80008b6:	487e      	ldr	r0, [pc, #504]	; (8000ab0 <main+0x2f4>)
 80008b8:	f005 f932 	bl	8005b20 <siprintf>
 80008bc:	e00d      	b.n	80008da <main+0x11e>
				else
					sprintf(now_time, " PM %02d: %02d: %02d  ", hour_now-12,min_now, sec_now);
 80008be:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <main+0x2dc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f1a3 020c 	sub.w	r2, r3, #12
 80008c6:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <main+0x2e8>)
 80008c8:	6819      	ldr	r1, [r3, #0]
 80008ca:	4b77      	ldr	r3, [pc, #476]	; (8000aa8 <main+0x2ec>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	460b      	mov	r3, r1
 80008d2:	4978      	ldr	r1, [pc, #480]	; (8000ab4 <main+0x2f8>)
 80008d4:	4876      	ldr	r0, [pc, #472]	; (8000ab0 <main+0x2f4>)
 80008d6:	f005 f923 	bl	8005b20 <siprintf>
				LCD_SendCommand(LCD_ADDR, 0xC0);
 80008da:	21c0      	movs	r1, #192	; 0xc0
 80008dc:	204e      	movs	r0, #78	; 0x4e
 80008de:	f7ff feab 	bl	8000638 <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, now_time);
 80008e2:	4973      	ldr	r1, [pc, #460]	; (8000ab0 <main+0x2f4>)
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f7ff fee8 	bl	80006ba <LCD_SendString>
 80008ea:	e05f      	b.n	80009ac <main+0x1f0>


			}
			else
			{
				printf("여기는 now time, [min], 분배된 전압: %d , posit: %d \n", adc_val, posit);
 80008ec:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <main+0x2d8>)
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <main+0x2d4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4870      	ldr	r0, [pc, #448]	; (8000ab8 <main+0x2fc>)
 80008f8:	f005 f896 	bl	8005a28 <iprintf>
				switch(adc_val)
 80008fc:	4b65      	ldr	r3, [pc, #404]	; (8000a94 <main+0x2d8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000904:	d805      	bhi.n	8000912 <main+0x156>
 8000906:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800090a:	d214      	bcs.n	8000936 <main+0x17a>
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d826      	bhi.n	800095e <main+0x1a2>
 8000910:	e00b      	b.n	800092a <main+0x16e>
 8000912:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000916:	d322      	bcc.n	800095e <main+0x1a2>
 8000918:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800091c:	d911      	bls.n	8000942 <main+0x186>
 800091e:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8000922:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000926:	d81a      	bhi.n	800095e <main+0x1a2>
 8000928:	e012      	b.n	8000950 <main+0x194>
					{
					case 0 ... 10 :
						min_now++;
 800092a:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <main+0x2e8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a5c      	ldr	r2, [pc, #368]	; (8000aa4 <main+0x2e8>)
 8000932:	6013      	str	r3, [r2, #0]
						break;
 8000934:	e013      	b.n	800095e <main+0x1a2>
					case 800 ... 900 :
						min_now--;  //시 감소
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <main+0x2e8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	4a59      	ldr	r2, [pc, #356]	; (8000aa4 <main+0x2e8>)
 800093e:	6013      	str	r3, [r2, #0]
						break;
 8000940:	e00d      	b.n	800095e <main+0x1a2>
					case 1800 ... 2000 :
						posit = 1;
 8000942:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <main+0x2d4>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
						printf("min, left 눌림\n");
 8000948:	485c      	ldr	r0, [pc, #368]	; (8000abc <main+0x300>)
 800094a:	f005 f8e1 	bl	8005b10 <puts>

						break;
 800094e:	e006      	b.n	800095e <main+0x1a2>
					case 2600 ... 3000 :
						posit = 1;
 8000950:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <main+0x2d4>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
						printf("min, right 눌림\n");
 8000956:	485a      	ldr	r0, [pc, #360]	; (8000ac0 <main+0x304>)
 8000958:	f005 f8da 	bl	8005b10 <puts>
						break;
 800095c:	bf00      	nop

					}
				if(hour_now < 12)
 800095e:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <main+0x2dc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b0b      	cmp	r3, #11
 8000964:	d80c      	bhi.n	8000980 <main+0x1c4>
					sprintf(now_time, " AM %02d: %02d: %02d  ", hour_now ,min_now, sec_now);
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <main+0x2dc>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <main+0x2e8>)
 800096c:	6819      	ldr	r1, [r3, #0]
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <main+0x2ec>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	460b      	mov	r3, r1
 8000976:	494d      	ldr	r1, [pc, #308]	; (8000aac <main+0x2f0>)
 8000978:	484d      	ldr	r0, [pc, #308]	; (8000ab0 <main+0x2f4>)
 800097a:	f005 f8d1 	bl	8005b20 <siprintf>
 800097e:	e00d      	b.n	800099c <main+0x1e0>
				else
					sprintf(now_time, " PM %02d: %02d: %02d  ", hour_now-12,min_now, sec_now);
 8000980:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <main+0x2dc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1a3 020c 	sub.w	r2, r3, #12
 8000988:	4b46      	ldr	r3, [pc, #280]	; (8000aa4 <main+0x2e8>)
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <main+0x2ec>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	4947      	ldr	r1, [pc, #284]	; (8000ab4 <main+0x2f8>)
 8000996:	4846      	ldr	r0, [pc, #280]	; (8000ab0 <main+0x2f4>)
 8000998:	f005 f8c2 	bl	8005b20 <siprintf>
				LCD_SendCommand(LCD_ADDR, 0xC0);
 800099c:	21c0      	movs	r1, #192	; 0xc0
 800099e:	204e      	movs	r0, #78	; 0x4e
 80009a0:	f7ff fe4a 	bl	8000638 <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, now_time);
 80009a4:	4942      	ldr	r1, [pc, #264]	; (8000ab0 <main+0x2f4>)
 80009a6:	204e      	movs	r0, #78	; 0x4e
 80009a8:	f7ff fe87 	bl	80006ba <LCD_SendString>



			}
			if(hour_now == hour_alm && min_now == min_alm)
 80009ac:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <main+0x2dc>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <main+0x308>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d10d      	bne.n	80009d4 <main+0x218>
 80009b8:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <main+0x2e8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <main+0x30c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d107      	bne.n	80009d4 <main+0x218>
			{
				LCD_SendCommand(LCD_ADDR, 0x80);		//lcd의 첫째줄
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	204e      	movs	r0, #78	; 0x4e
 80009c8:	f7ff fe36 	bl	8000638 <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, "Wake up! hunny~ ");
 80009cc:	493f      	ldr	r1, [pc, #252]	; (8000acc <main+0x310>)
 80009ce:	204e      	movs	r0, #78	; 0x4e
 80009d0:	f7ff fe73 	bl	80006ba <LCD_SendString>
			}
		}
		if(mode ==1)
 80009d4:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <main+0x2c8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	f040 810e 	bne.w	8000bfa <main+0x43e>
		{
			sec_alm = 0;
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <main+0x314>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
			LCD_SendCommand(LCD_ADDR, 0x80);		//lcd의 첫째줄
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	204e      	movs	r0, #78	; 0x4e
 80009e8:	f7ff fe26 	bl	8000638 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " Alarm setting ");
 80009ec:	4939      	ldr	r1, [pc, #228]	; (8000ad4 <main+0x318>)
 80009ee:	204e      	movs	r0, #78	; 0x4e
 80009f0:	f7ff fe63 	bl	80006ba <LCD_SendString>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_SET)
 80009f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f8:	4824      	ldr	r0, [pc, #144]	; (8000a8c <main+0x2d0>)
 80009fa:	f001 ff87 	bl	800290c <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d104      	bne.n	8000a0e <main+0x252>
					mode++;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <main+0x2c8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <main+0x2c8>)
 8000a0c:	6013      	str	r3, [r2, #0]
			if(posit == 1 )  //posi가 0이면  hour 위치
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <main+0x2d4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	f040 8091 	bne.w	8000b3a <main+0x37e>
				{
					printf("여기는 now time, hour, 분배된 전압: %d , posit: %d \n", adc_val, posit);
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <main+0x2d8>)
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <main+0x2d4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <main+0x31c>)
 8000a24:	f005 f800 	bl	8005a28 <iprintf>
					switch(adc_val)
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <main+0x2d8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000a30:	d805      	bhi.n	8000a3e <main+0x282>
 8000a32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000a36:	d214      	bcs.n	8000a62 <main+0x2a6>
 8000a38:	2b0a      	cmp	r3, #10
 8000a3a:	d856      	bhi.n	8000aea <main+0x32e>
 8000a3c:	e00b      	b.n	8000a56 <main+0x29a>
 8000a3e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000a42:	d352      	bcc.n	8000aea <main+0x32e>
 8000a44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a48:	d911      	bls.n	8000a6e <main+0x2b2>
 8000a4a:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8000a4e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a52:	d84a      	bhi.n	8000aea <main+0x32e>
 8000a54:	e042      	b.n	8000adc <main+0x320>
						{
						case 0 ... 10 : 	//위
							hour_alm++;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <main+0x308>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <main+0x308>)
 8000a5e:	6013      	str	r3, [r2, #0]
							break;
 8000a60:	e043      	b.n	8000aea <main+0x32e>
						case 800 ... 900 : 	//아래
							hour_alm--;  //시 감소
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <main+0x308>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <main+0x308>)
 8000a6a:	6013      	str	r3, [r2, #0]
							break;
 8000a6c:	e03d      	b.n	8000aea <main+0x32e>
						case 1800 ... 2000 :	//왼쪽
							posit = 5;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <main+0x2d4>)
 8000a70:	2205      	movs	r2, #5
 8000a72:	601a      	str	r2, [r3, #0]
							printf("hour, left 눌림\n");
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <main+0x2e0>)
 8000a76:	f005 f84b 	bl	8005b10 <puts>
							break;
 8000a7a:	e036      	b.n	8000aea <main+0x32e>
 8000a7c:	2000024c 	.word	0x2000024c
 8000a80:	200001d0 	.word	0x200001d0
 8000a84:	200000fc 	.word	0x200000fc
 8000a88:	08006c58 	.word	0x08006c58
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	20000000 	.word	0x20000000
 8000a94:	200000f8 	.word	0x200000f8
 8000a98:	20000100 	.word	0x20000100
 8000a9c:	08006c6c 	.word	0x08006c6c
 8000aa0:	08006c80 	.word	0x08006c80
 8000aa4:	20000104 	.word	0x20000104
 8000aa8:	20000108 	.word	0x20000108
 8000aac:	08006c94 	.word	0x08006c94
 8000ab0:	200001b8 	.word	0x200001b8
 8000ab4:	08006cac 	.word	0x08006cac
 8000ab8:	08006cc4 	.word	0x08006cc4
 8000abc:	08006d04 	.word	0x08006d04
 8000ac0:	08006d18 	.word	0x08006d18
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	08006d2c 	.word	0x08006d2c
 8000ad0:	20000110 	.word	0x20000110
 8000ad4:	08006d40 	.word	0x08006d40
 8000ad8:	08006d50 	.word	0x08006d50
						case 2600 ... 3000 :	//오른쪽
							posit = 5;
 8000adc:	4b80      	ldr	r3, [pc, #512]	; (8000ce0 <main+0x524>)
 8000ade:	2205      	movs	r2, #5
 8000ae0:	601a      	str	r2, [r3, #0]
							printf("hour, right 눌림\n");
 8000ae2:	4880      	ldr	r0, [pc, #512]	; (8000ce4 <main+0x528>)
 8000ae4:	f005 f814 	bl	8005b10 <puts>
							break;
 8000ae8:	bf00      	nop

						}
					if(hour_now < 12)
 8000aea:	4b7f      	ldr	r3, [pc, #508]	; (8000ce8 <main+0x52c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b0b      	cmp	r3, #11
 8000af0:	d80c      	bhi.n	8000b0c <main+0x350>
						sprintf(alm_time, " AM %02d: %02d: %02d  ", hour_alm ,min_alm, sec_alm);
 8000af2:	4b7e      	ldr	r3, [pc, #504]	; (8000cec <main+0x530>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b7e      	ldr	r3, [pc, #504]	; (8000cf0 <main+0x534>)
 8000af8:	6819      	ldr	r1, [r3, #0]
 8000afa:	4b7e      	ldr	r3, [pc, #504]	; (8000cf4 <main+0x538>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	460b      	mov	r3, r1
 8000b02:	497d      	ldr	r1, [pc, #500]	; (8000cf8 <main+0x53c>)
 8000b04:	487d      	ldr	r0, [pc, #500]	; (8000cfc <main+0x540>)
 8000b06:	f005 f80b 	bl	8005b20 <siprintf>
 8000b0a:	e00d      	b.n	8000b28 <main+0x36c>
					else
						sprintf(alm_time, " PM %02d: %02d: %02d  ", hour_alm-12,min_alm, sec_alm);
 8000b0c:	4b77      	ldr	r3, [pc, #476]	; (8000cec <main+0x530>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1a3 020c 	sub.w	r2, r3, #12
 8000b14:	4b76      	ldr	r3, [pc, #472]	; (8000cf0 <main+0x534>)
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	4b76      	ldr	r3, [pc, #472]	; (8000cf4 <main+0x538>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	4977      	ldr	r1, [pc, #476]	; (8000d00 <main+0x544>)
 8000b22:	4876      	ldr	r0, [pc, #472]	; (8000cfc <main+0x540>)
 8000b24:	f004 fffc 	bl	8005b20 <siprintf>
					LCD_SendCommand(LCD_ADDR, 0xC0);
 8000b28:	21c0      	movs	r1, #192	; 0xc0
 8000b2a:	204e      	movs	r0, #78	; 0x4e
 8000b2c:	f7ff fd84 	bl	8000638 <LCD_SendCommand>
					LCD_SendString(LCD_ADDR, alm_time);
 8000b30:	4972      	ldr	r1, [pc, #456]	; (8000cfc <main+0x540>)
 8000b32:	204e      	movs	r0, #78	; 0x4e
 8000b34:	f7ff fdc1 	bl	80006ba <LCD_SendString>
 8000b38:	e05f      	b.n	8000bfa <main+0x43e>
					}
						*/
				}
				else
				{
					printf("여기는 now time, [min], 분배된 전압: %d , posit: %d \n", adc_val, posit);
 8000b3a:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <main+0x548>)
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	4b68      	ldr	r3, [pc, #416]	; (8000ce0 <main+0x524>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4870      	ldr	r0, [pc, #448]	; (8000d08 <main+0x54c>)
 8000b46:	f004 ff6f 	bl	8005a28 <iprintf>
					switch(adc_val)
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	; (8000d04 <main+0x548>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000b52:	d805      	bhi.n	8000b60 <main+0x3a4>
 8000b54:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b58:	d214      	bcs.n	8000b84 <main+0x3c8>
 8000b5a:	2b0a      	cmp	r3, #10
 8000b5c:	d826      	bhi.n	8000bac <main+0x3f0>
 8000b5e:	e00b      	b.n	8000b78 <main+0x3bc>
 8000b60:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000b64:	d322      	bcc.n	8000bac <main+0x3f0>
 8000b66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b6a:	d911      	bls.n	8000b90 <main+0x3d4>
 8000b6c:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8000b70:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b74:	d81a      	bhi.n	8000bac <main+0x3f0>
 8000b76:	e012      	b.n	8000b9e <main+0x3e2>
						{
						case 0 ... 10 :
							min_alm++;
 8000b78:	4b5d      	ldr	r3, [pc, #372]	; (8000cf0 <main+0x534>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a5c      	ldr	r2, [pc, #368]	; (8000cf0 <main+0x534>)
 8000b80:	6013      	str	r3, [r2, #0]
							break;
 8000b82:	e013      	b.n	8000bac <main+0x3f0>
						case 800 ... 900 :
							min_alm--;  //시 감소
 8000b84:	4b5a      	ldr	r3, [pc, #360]	; (8000cf0 <main+0x534>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a59      	ldr	r2, [pc, #356]	; (8000cf0 <main+0x534>)
 8000b8c:	6013      	str	r3, [r2, #0]
							break;
 8000b8e:	e00d      	b.n	8000bac <main+0x3f0>
						case 1800 ... 2000 :
							posit = 1;
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <main+0x524>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
							printf("min, left 눌림\n");
 8000b96:	485d      	ldr	r0, [pc, #372]	; (8000d0c <main+0x550>)
 8000b98:	f004 ffba 	bl	8005b10 <puts>

							break;
 8000b9c:	e006      	b.n	8000bac <main+0x3f0>
						case 2600 ... 3000 :
							posit = 1;
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <main+0x524>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
							printf("min, right 눌림\n");
 8000ba4:	485a      	ldr	r0, [pc, #360]	; (8000d10 <main+0x554>)
 8000ba6:	f004 ffb3 	bl	8005b10 <puts>
							break;
 8000baa:	bf00      	nop

						}

					if(hour_now < 12)
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <main+0x52c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b0b      	cmp	r3, #11
 8000bb2:	d80c      	bhi.n	8000bce <main+0x412>
						sprintf(alm_time, " AM %02d: %02d: %02d  ", hour_alm ,min_alm, sec_alm);
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <main+0x530>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b4d      	ldr	r3, [pc, #308]	; (8000cf0 <main+0x534>)
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <main+0x538>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	494c      	ldr	r1, [pc, #304]	; (8000cf8 <main+0x53c>)
 8000bc6:	484d      	ldr	r0, [pc, #308]	; (8000cfc <main+0x540>)
 8000bc8:	f004 ffaa 	bl	8005b20 <siprintf>
 8000bcc:	e00d      	b.n	8000bea <main+0x42e>
					else
						sprintf(alm_time, " PM %02d: %02d: %02d  ", hour_alm-12,min_alm, sec_alm);
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <main+0x530>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1a3 020c 	sub.w	r2, r3, #12
 8000bd6:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <main+0x534>)
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	4b46      	ldr	r3, [pc, #280]	; (8000cf4 <main+0x538>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	460b      	mov	r3, r1
 8000be2:	4947      	ldr	r1, [pc, #284]	; (8000d00 <main+0x544>)
 8000be4:	4845      	ldr	r0, [pc, #276]	; (8000cfc <main+0x540>)
 8000be6:	f004 ff9b 	bl	8005b20 <siprintf>
					LCD_SendCommand(LCD_ADDR, 0xC0);
 8000bea:	21c0      	movs	r1, #192	; 0xc0
 8000bec:	204e      	movs	r0, #78	; 0x4e
 8000bee:	f7ff fd23 	bl	8000638 <LCD_SendCommand>
					LCD_SendString(LCD_ADDR, alm_time);
 8000bf2:	4942      	ldr	r1, [pc, #264]	; (8000cfc <main+0x540>)
 8000bf4:	204e      	movs	r0, #78	; 0x4e
 8000bf6:	f7ff fd60 	bl	80006ba <LCD_SendString>


				}

		}
		if(mode ==2)
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <main+0x558>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d165      	bne.n	8000cce <main+0x512>
		{
			LCD_SendCommand(LCD_ADDR, 0x80);		//lcd의 첫째줄
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	204e      	movs	r0, #78	; 0x4e
 8000c06:	f7ff fd17 	bl	8000638 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " Music setting  ");
 8000c0a:	4943      	ldr	r1, [pc, #268]	; (8000d18 <main+0x55c>)
 8000c0c:	204e      	movs	r0, #78	; 0x4e
 8000c0e:	f7ff fd54 	bl	80006ba <LCD_SendString>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_SET)
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	4841      	ldr	r0, [pc, #260]	; (8000d1c <main+0x560>)
 8000c18:	f001 fe78 	bl	800290c <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d104      	bne.n	8000c2c <main+0x470>
					mode++;
 8000c22:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <main+0x558>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a3a      	ldr	r2, [pc, #232]	; (8000d14 <main+0x558>)
 8000c2a:	6013      	str	r3, [r2, #0]
			switch(adc_val)
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <main+0x548>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000c34:	d805      	bhi.n	8000c42 <main+0x486>
 8000c36:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000c3a:	d214      	bcs.n	8000c66 <main+0x4aa>
 8000c3c:	2b0a      	cmp	r3, #10
 8000c3e:	d824      	bhi.n	8000c8a <main+0x4ce>
 8000c40:	e00b      	b.n	8000c5a <main+0x49e>
 8000c42:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000c46:	d320      	bcc.n	8000c8a <main+0x4ce>
 8000c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c4c:	d911      	bls.n	8000c72 <main+0x4b6>
 8000c4e:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8000c52:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c56:	d818      	bhi.n	8000c8a <main+0x4ce>
 8000c58:	e011      	b.n	8000c7e <main+0x4c2>
			{
			case 0 ... 10 :
				i++;
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <main+0x564>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <main+0x564>)
 8000c62:	6013      	str	r3, [r2, #0]
				break;
 8000c64:	e011      	b.n	8000c8a <main+0x4ce>
			case 800 ... 900 :
				i--;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <main+0x564>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <main+0x564>)
 8000c6e:	6013      	str	r3, [r2, #0]
				break;
 8000c70:	e00b      	b.n	8000c8a <main+0x4ce>
			case 1800 ... 2000 :
				i--;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <main+0x564>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <main+0x564>)
 8000c7a:	6013      	str	r3, [r2, #0]
				break;
 8000c7c:	e005      	b.n	8000c8a <main+0x4ce>
			case 2600 ... 3000 :
				i++;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <main+0x564>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <main+0x564>)
 8000c86:	6013      	str	r3, [r2, #0]
				break;
 8000c88:	bf00      	nop
			}
			if(i >4 ) i =0;
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <main+0x564>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d902      	bls.n	8000c98 <main+0x4dc>
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main+0x564>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
			LCD_SendCommand(LCD_ADDR, 0xC0);
 8000c98:	21c0      	movs	r1, #192	; 0xc0
 8000c9a:	204e      	movs	r0, #78	; 0x4e
 8000c9c:	f7ff fccc 	bl	8000638 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, music_cnt[i]);
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <main+0x564>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <main+0x568>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	204e      	movs	r0, #78	; 0x4e
 8000cb4:	f7ff fd01 	bl	80006ba <LCD_SendString>

			printf("%s\n", music_cnt[i]);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <main+0x564>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <main+0x568>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 ff21 	bl	8005b10 <puts>

		}
		if(mode > 2) mode = 0;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <main+0x558>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	f67f ad91 	bls.w	80007fa <main+0x3e>
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <main+0x558>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
		ADC_MODULE();
 8000cde:	e58c      	b.n	80007fa <main+0x3e>
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	08006c80 	.word	0x08006c80
 8000ce8:	20000100 	.word	0x20000100
 8000cec:	2000010c 	.word	0x2000010c
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20000110 	.word	0x20000110
 8000cf8:	08006c94 	.word	0x08006c94
 8000cfc:	20000218 	.word	0x20000218
 8000d00:	08006cac 	.word	0x08006cac
 8000d04:	200000f8 	.word	0x200000f8
 8000d08:	08006cc4 	.word	0x08006cc4
 8000d0c:	08006d04 	.word	0x08006d04
 8000d10:	08006d18 	.word	0x08006d18
 8000d14:	200000fc 	.word	0x200000fc
 8000d18:	08006d90 	.word	0x08006d90
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	20000114 	.word	0x20000114
 8000d24:	20000008 	.word	0x20000008

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0a0      	sub	sp, #128	; 0x80
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d32:	2230      	movs	r2, #48	; 0x30
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fe6e 	bl	8005a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2230      	movs	r2, #48	; 0x30
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 fe5f 	bl	8005a18 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <SystemClock_Config+0x108>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <SystemClock_Config+0x108>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <SystemClock_Config+0x108>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <SystemClock_Config+0x10c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <SystemClock_Config+0x10c>)
 8000d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <SystemClock_Config+0x10c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d92:	2306      	movs	r3, #6
 8000d94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d96:	2301      	movs	r3, #1
 8000d98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
 8000da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000daa:	2308      	movs	r3, #8
 8000dac:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dae:	23b4      	movs	r3, #180	; 0xb4
 8000db0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db6:	2307      	movs	r3, #7
 8000db8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fc0e 	bl	80035e0 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dca:	f000 fa85 	bl	80012d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dce:	f002 fbb7 	bl	8003540 <HAL_PWREx_EnableOverDrive>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd8:	f000 fa7e 	bl	80012d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	230f      	movs	r3, #15
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de0:	2302      	movs	r3, #2
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000df4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000df8:	2105      	movs	r1, #5
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fe60 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000e06:	f000 fa67 	bl	80012d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e0a:	2320      	movs	r3, #32
 8000e0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 f843 	bl	8003ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000e24:	f000 fa58 	bl	80012d8 <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3780      	adds	r7, #128	; 0x80
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <MX_ADC1_Init+0xa0>)
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e9a:	f000 fd27 	bl	80018ec <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 fa18 	bl	80012d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000eba:	f001 f811 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec4:	f000 fa08 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200001d0 	.word	0x200001d0
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	0f000001 	.word	0x0f000001

08000edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_I2C1_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <MX_I2C1_Init+0x7c>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f1a:	f001 fd29 	bl	8002970 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f9d8 	bl	80012d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f2c:	f002 fa8d 	bl	800344a <HAL_I2CEx_ConfigAnalogFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f36:	f000 f9cf 	bl	80012d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f3e:	f002 fac0 	bl	80034c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 f9c6 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000164 	.word	0x20000164
 8000f54:	40005400 	.word	0x40005400
 8000f58:	000186a0 	.word	0x000186a0

08000f5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <MX_RTC_Init+0x48>)
 8000f64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f6e:	227f      	movs	r2, #127	; 0x7f
 8000f70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f74:	22ff      	movs	r2, #255	; 0xff
 8000f76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_RTC_Init+0x44>)
 8000f8c:	f003 f948 	bl	8004220 <HAL_RTC_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f96:	f000 f99f 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000022c 	.word	0x2000022c
 8000fa4:	40002800 	.word	0x40002800

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fdc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_TIM2_Init+0x98>)
 8000ff0:	f003 f9fb 	bl	80043ea <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ffa:	f000 f96d 	bl	80012d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_TIM2_Init+0x98>)
 800100c:	f003 fb44 	bl	8004698 <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001016:	f000 f95f 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_TIM2_Init+0x98>)
 8001028:	f003 fd50 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001032:	f000 f951 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000024c 	.word	0x2000024c

08001044 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART3_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800107c:	f003 fdb6 	bl	8004bec <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f927 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000124 	.word	0x20000124
 8001094:	40004800 	.word	0x40004800

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b7b      	ldr	r3, [pc, #492]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a7a      	ldr	r2, [pc, #488]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b74      	ldr	r3, [pc, #464]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a73      	ldr	r2, [pc, #460]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a6c      	ldr	r2, [pc, #432]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <MX_GPIO_Init+0x208>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <MX_GPIO_Init+0x208>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a5e      	ldr	r2, [pc, #376]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a57      	ldr	r2, [pc, #348]	; (80012a0 <MX_GPIO_Init+0x208>)
 8001144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <MX_GPIO_Init+0x208>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f244 0181 	movw	r1, #16513	; 0x4081
 800115c:	4851      	ldr	r0, [pc, #324]	; (80012a4 <MX_GPIO_Init+0x20c>)
 800115e:	f001 fbed 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	4850      	ldr	r0, [pc, #320]	; (80012a8 <MX_GPIO_Init+0x210>)
 8001168:	f001 fbe8 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800116c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	484a      	ldr	r0, [pc, #296]	; (80012ac <MX_GPIO_Init+0x214>)
 8001182:	f001 fa19 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001186:	2332      	movs	r3, #50	; 0x32
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001196:	230b      	movs	r3, #11
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4842      	ldr	r0, [pc, #264]	; (80012ac <MX_GPIO_Init+0x214>)
 80011a2:	f001 fa09 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011a6:	2386      	movs	r3, #134	; 0x86
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b6:	230b      	movs	r3, #11
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	483b      	ldr	r0, [pc, #236]	; (80012b0 <MX_GPIO_Init+0x218>)
 80011c2:	f001 f9f9 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4831      	ldr	r0, [pc, #196]	; (80012a4 <MX_GPIO_Init+0x20c>)
 80011e0:	f001 f9ea 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f6:	230b      	movs	r3, #11
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <MX_GPIO_Init+0x20c>)
 8001202:	f001 f9d9 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4822      	ldr	r0, [pc, #136]	; (80012a8 <MX_GPIO_Init+0x210>)
 800121e:	f001 f9cb 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <MX_GPIO_Init+0x210>)
 8001236:	f001 f9bf 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800123a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800124c:	230a      	movs	r3, #10
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4816      	ldr	r0, [pc, #88]	; (80012b0 <MX_GPIO_Init+0x218>)
 8001258:	f001 f9ae 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	480f      	ldr	r0, [pc, #60]	; (80012b0 <MX_GPIO_Init+0x218>)
 8001272:	f001 f9a1 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001276:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001288:	230b      	movs	r3, #11
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_GPIO_Init+0x210>)
 8001294:	f001 f990 	bl	80025b8 <HAL_GPIO_Init>

}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000

080012b4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80012bc:	1d39      	adds	r1, r7, #4
 80012be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c2:	2201      	movs	r2, #1
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <__io_putchar+0x20>)
 80012c6:	f003 fcde 	bl	8004c86 <HAL_UART_Transmit>

  return ch;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000124 	.word	0x20000124

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_ADC_MspInit+0x8c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12f      	bne.n	80013ba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_ADC_MspInit+0x90>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_ADC_MspInit+0x90>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_ADC_MspInit+0x90>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_ADC_MspInit+0x90>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_ADC_MspInit+0x90>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_ADC_MspInit+0x90>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001392:	2308      	movs	r3, #8
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <HAL_ADC_MspInit+0x94>)
 80013a6:	f001 f907 	bl	80025b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2012      	movs	r0, #18
 80013b0:	f001 f8a9 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013b4:	2012      	movs	r0, #18
 80013b6:	f001 f8c2 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40012000 	.word	0x40012000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_I2C_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_I2C_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_I2C_MspInit+0x88>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_I2C_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800140e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001420:	2304      	movs	r3, #4
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_I2C_MspInit+0x8c>)
 800142c:	f001 f8c4 	bl	80025b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_I2C_MspInit+0x88>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_I2C_MspInit+0x88>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_I2C_MspInit+0x88>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_RTC_MspInit+0x24>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d102      	bne.n	8001478 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RTC_MspInit+0x28>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40002800 	.word	0x40002800
 8001488:	42470e3c 	.word	0x42470e3c

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149c:	d115      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_TIM_Base_MspInit+0x48>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	201c      	movs	r0, #28
 80014c0:	f001 f821 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014c4:	201c      	movs	r0, #28
 80014c6:	f001 f83a 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_UART_MspInit+0x94>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d134      	bne.n	8001564 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_UART_MspInit+0x98>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_UART_MspInit+0x98>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001544:	2307      	movs	r3, #7
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <HAL_UART_MspInit+0x9c>)
 8001550:	f001 f832 	bl	80025b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2027      	movs	r0, #39	; 0x27
 800155a:	f000 ffd4 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800155e:	2027      	movs	r0, #39	; 0x27
 8001560:	f000 ffed 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004800 	.word	0x40004800
 8001570:	40023800 	.word	0x40023800
 8001574:	40020c00 	.word	0x40020c00

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f94c 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <ADC_IRQHandler+0x10>)
 80015da:	f000 fb15 	bl	8001c08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001d0 	.word	0x200001d0

080015e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM2_IRQHandler+0x10>)
 80015ee:	f002 ff4b 	bl	8004488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000024c 	.word	0x2000024c

080015fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <USART3_IRQHandler+0x10>)
 8001602:	f003 fbd9 	bl	8004db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000124 	.word	0x20000124

08001610 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
	}

return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe25 	bl	80012b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
	}
	return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x50>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x16>
		heap_end = &end;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <_sbrk+0x50>)
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <_sbrk+0x54>)
 8001700:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <_sbrk+0x50>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <_sbrk+0x50>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	466a      	mov	r2, sp
 8001712:	4293      	cmp	r3, r2
 8001714:	d907      	bls.n	8001726 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001716:	f004 f955 	bl	80059c4 <__errno>
 800171a:	4602      	mov	r2, r0
 800171c:	230c      	movs	r3, #12
 800171e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	e006      	b.n	8001734 <_sbrk+0x48>
	}

	heap_end += incr;
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <_sbrk+0x50>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a03      	ldr	r2, [pc, #12]	; (800173c <_sbrk+0x50>)
 8001730:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000118 	.word	0x20000118
 8001740:	20000298 	.word	0x20000298

08001744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <SystemInit+0x28>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <SystemInit+0x28>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <SystemInit+0x28>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175e:	609a      	str	r2, [r3, #8]
#endif
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001776:	e003      	b.n	8001780 <LoopCopyDataInit>

08001778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800177a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800177c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800177e:	3104      	adds	r1, #4

08001780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001788:	d3f6      	bcc.n	8001778 <CopyDataInit>
  ldr  r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800178c:	e002      	b.n	8001794 <LoopFillZerobss>

0800178e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800178e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001790:	f842 3b04 	str.w	r3, [r2], #4

08001794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001798:	d3f9      	bcc.n	800178e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800179a:	f7ff ffd3 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f004 f917 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff f80b 	bl	80007bc <main>
  bx  lr    
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80017ac:	08006e64 	.word	0x08006e64
  ldr  r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017b4:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80017b8:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80017bc:	20000298 	.word	0x20000298

080017c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <CAN1_RX0_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 fe7f 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fd76 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fe97 	bl	800255a <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 fe5f 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000006c 	.word	0x2000006c
 8001860:	20000074 	.word	0x20000074
 8001864:	20000070 	.word	0x20000070

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000074 	.word	0x20000074
 800188c:	20000290 	.word	0x20000290

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000290 	.word	0x20000290

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_Delay+0x40>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000074 	.word	0x20000074

080018ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e033      	b.n	800196a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fd14 	bl	8001338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001932:	f023 0302 	bic.w	r3, r3, #2
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fc00 	bl	8002144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
 800195a:	e001      	b.n	8001960 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_ADC_Start+0x1a>
 800198a:	2302      	movs	r3, #2
 800198c:	e0a5      	b.n	8001ada <HAL_ADC_Start+0x166>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d018      	beq.n	80019d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_ADC_Start+0x174>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_ADC_Start+0x178>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9a      	lsrs	r2, r3, #18
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d179      	bne.n	8001ad8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a22:	d106      	bne.n	8001a32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f023 0206 	bic.w	r2, r3, #6
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a30:	e002      	b.n	8001a38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_ADC_Start+0x17c>)
 8001a42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d12a      	bne.n	8001ab0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a25      	ldr	r2, [pc, #148]	; (8001af4 <HAL_ADC_Start+0x180>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d015      	beq.n	8001a90 <HAL_ADC_Start+0x11c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_ADC_Start+0x184>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_Start+0x106>
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_ADC_Start+0x17c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_ADC_Start+0x188>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d129      	bne.n	8001ad8 <HAL_ADC_Start+0x164>
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_ADC_Start+0x17c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d823      	bhi.n	8001ad8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	e013      	b.n	8001ad8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_ADC_Start+0x180>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_ADC_Start+0x164>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ad6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	2000006c 	.word	0x2000006c
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	40012300 	.word	0x40012300
 8001af4:	40012000 	.word	0x40012000
 8001af8:	40012100 	.word	0x40012100
 8001afc:	40012200 	.word	0x40012200

08001b00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d113      	bne.n	8001b46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b2c:	d10b      	bne.n	8001b46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e05c      	b.n	8001c00 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b46:	f7ff fea3 	bl	8001890 <HAL_GetTick>
 8001b4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b4c:	e01a      	b.n	8001b84 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d016      	beq.n	8001b84 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_ADC_PollForConversion+0x6c>
 8001b5c:	f7ff fe98 	bl	8001890 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d20b      	bcs.n	8001b84 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f043 0204 	orr.w	r2, r3, #4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03d      	b.n	8001c00 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d1dd      	bne.n	8001b4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0212 	mvn.w	r2, #18
 8001b9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d123      	bne.n	8001bfe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11f      	bne.n	8001bfe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d111      	bne.n	8001bfe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d049      	beq.n	8001cde <HAL_ADC_IRQHandler+0xd6>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d046      	beq.n	8001cde <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d12b      	bne.n	8001cce <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d127      	bne.n	8001cce <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d119      	bne.n	8001cce <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0220 	bic.w	r2, r2, #32
 8001ca8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8e8 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0212 	mvn.w	r2, #18
 8001cdc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d057      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x1b8>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d054      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d139      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d12b      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d124      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d11d      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d119      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fac3 	bl	800233c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 020c 	mvn.w	r2, #12
 8001dbe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d017      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x21a>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d014      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10d      	bne.n	8001e22 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f850 	bl	8001eb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0201 	mvn.w	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x27a>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0202 	orr.w	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0220 	mvn.w	r2, #32
 8001e70:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f82a 	bl	8001ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0220 	mvn.w	r2, #32
 8001e80:	601a      	str	r2, [r3, #0]
  }
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1c>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e113      	b.n	8002124 <HAL_ADC_ConfigChannel+0x244>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d925      	bls.n	8001f58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b1e      	subs	r3, #30
 8001f22:	2207      	movs	r2, #7
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	400a      	ands	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68d9      	ldr	r1, [r3, #12]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	4603      	mov	r3, r0
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4403      	add	r3, r0
 8001f4a:	3b1e      	subs	r3, #30
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	e022      	b.n	8001f9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	400a      	ands	r2, r1
 8001f7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4403      	add	r3, r0
 8001f94:	409a      	lsls	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d824      	bhi.n	8001ff0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b05      	subs	r3, #5
 8001fb8:	221f      	movs	r2, #31
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b05      	subs	r3, #5
 8001fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
 8001fee:	e04c      	b.n	800208a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	d824      	bhi.n	8002042 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b23      	subs	r3, #35	; 0x23
 800200a:	221f      	movs	r2, #31
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43da      	mvns	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	400a      	ands	r2, r1
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b23      	subs	r3, #35	; 0x23
 8002034:	fa00 f203 	lsl.w	r2, r0, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
 8002040:	e023      	b.n	800208a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b41      	subs	r3, #65	; 0x41
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b41      	subs	r3, #65	; 0x41
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208a:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_ADC_ConfigChannel+0x250>)
 800208c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <HAL_ADC_ConfigChannel+0x254>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d10f      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b12      	cmp	r3, #18
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_ADC_ConfigChannel+0x254>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12b      	bne.n	800211a <HAL_ADC_ConfigChannel+0x23a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_ADC_ConfigChannel+0x258>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x1f4>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b11      	cmp	r3, #17
 80020d2:	d122      	bne.n	800211a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_ADC_ConfigChannel+0x258>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d111      	bne.n	800211a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_ADC_ConfigChannel+0x25c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_ADC_ConfigChannel+0x260>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	0c9a      	lsrs	r2, r3, #18
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800210c:	e002      	b.n	8002114 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3b01      	subs	r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f9      	bne.n	800210e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40012300 	.word	0x40012300
 8002134:	40012000 	.word	0x40012000
 8002138:	10000012 	.word	0x10000012
 800213c:	2000006c 	.word	0x2000006c
 8002140:	431bde83 	.word	0x431bde83

08002144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	4b79      	ldr	r3, [pc, #484]	; (8002334 <ADC_Init+0x1f0>)
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	4a58      	ldr	r2, [pc, #352]	; (8002338 <ADC_Init+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e00f      	b.n	8002242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0202 	bic.w	r2, r2, #2
 8002250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
 800225c:	005a      	lsls	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800228e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	035a      	lsls	r2, r3, #13
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e007      	b.n	80022b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	051a      	lsls	r2, r3, #20
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fa:	025a      	lsls	r2, r3, #9
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	029a      	lsls	r2, r3, #10
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012300 	.word	0x40012300
 8002338:	0f000001 	.word	0x0f000001

0800233c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff8e 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff29 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff3e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff8e 	bl	8002444 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5d 	bl	80023f0 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff31 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d004      	beq.n	8002590 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00c      	b.n	80025aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2205      	movs	r2, #5
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e177      	b.n	80028c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f040 8166 	bne.w	80028be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d00b      	beq.n	8002612 <HAL_GPIO_Init+0x5a>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002606:	2b11      	cmp	r3, #17
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b12      	cmp	r3, #18
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0xfc>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d123      	bne.n	80026fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80c0 	beq.w	80028be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_GPIO_Init+0x320>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a64      	ldr	r2, [pc, #400]	; (80028d8 <HAL_GPIO_Init+0x320>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b62      	ldr	r3, [pc, #392]	; (80028d8 <HAL_GPIO_Init+0x320>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275a:	4a60      	ldr	r2, [pc, #384]	; (80028dc <HAL_GPIO_Init+0x324>)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a57      	ldr	r2, [pc, #348]	; (80028e0 <HAL_GPIO_Init+0x328>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d037      	beq.n	80027f6 <HAL_GPIO_Init+0x23e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_GPIO_Init+0x32c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d031      	beq.n	80027f2 <HAL_GPIO_Init+0x23a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a55      	ldr	r2, [pc, #340]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d02b      	beq.n	80027ee <HAL_GPIO_Init+0x236>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a54      	ldr	r2, [pc, #336]	; (80028ec <HAL_GPIO_Init+0x334>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d025      	beq.n	80027ea <HAL_GPIO_Init+0x232>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a53      	ldr	r2, [pc, #332]	; (80028f0 <HAL_GPIO_Init+0x338>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01f      	beq.n	80027e6 <HAL_GPIO_Init+0x22e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_GPIO_Init+0x33c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x22a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <HAL_GPIO_Init+0x340>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x226>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a50      	ldr	r2, [pc, #320]	; (80028fc <HAL_GPIO_Init+0x344>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x222>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4f      	ldr	r2, [pc, #316]	; (8002900 <HAL_GPIO_Init+0x348>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x21e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4e      	ldr	r2, [pc, #312]	; (8002904 <HAL_GPIO_Init+0x34c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x21a>
 80027ce:	2309      	movs	r3, #9
 80027d0:	e012      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027d2:	230a      	movs	r3, #10
 80027d4:	e010      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027d6:	2308      	movs	r3, #8
 80027d8:	e00e      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027da:	2307      	movs	r3, #7
 80027dc:	e00c      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00a      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027e2:	2305      	movs	r3, #5
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4934      	ldr	r1, [pc, #208]	; (80028dc <HAL_GPIO_Init+0x324>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002816:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283a:	4a33      	ldr	r2, [pc, #204]	; (8002908 <HAL_GPIO_Init+0x350>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_GPIO_Init+0x350>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288e:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <HAL_GPIO_Init+0x350>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f ae84 	bls.w	80025d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	3724      	adds	r7, #36	; 0x24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021800 	.word	0x40021800
 80028fc:	40021c00 	.word	0x40021c00
 8002900:	40022000 	.word	0x40022000
 8002904:	40022400 	.word	0x40022400
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e001      	b.n	800292e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002958:	e003      	b.n	8002962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	619a      	str	r2, [r3, #24]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e11f      	b.n	8002bc2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fd1a 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029d4:	f001 fa3e 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 80029d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <HAL_I2C_Init+0x25c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d807      	bhi.n	80029f4 <HAL_I2C_Init+0x84>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a7a      	ldr	r2, [pc, #488]	; (8002bd0 <HAL_I2C_Init+0x260>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e006      	b.n	8002a02 <HAL_I2C_Init+0x92>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <HAL_I2C_Init+0x264>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0db      	b.n	8002bc2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <HAL_I2C_Init+0x268>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0c9b      	lsrs	r3, r3, #18
 8002a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a64      	ldr	r2, [pc, #400]	; (8002bcc <HAL_I2C_Init+0x25c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d802      	bhi.n	8002a44 <HAL_I2C_Init+0xd4>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3301      	adds	r3, #1
 8002a42:	e009      	b.n	8002a58 <HAL_I2C_Init+0xe8>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	4a63      	ldr	r2, [pc, #396]	; (8002bdc <HAL_I2C_Init+0x26c>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	3301      	adds	r3, #1
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4956      	ldr	r1, [pc, #344]	; (8002bcc <HAL_I2C_Init+0x25c>)
 8002a74:	428b      	cmp	r3, r1
 8002a76:	d80d      	bhi.n	8002a94 <HAL_I2C_Init+0x124>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e59      	subs	r1, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	bf38      	it	cc
 8002a90:	2304      	movcc	r3, #4
 8002a92:	e04f      	b.n	8002b34 <HAL_I2C_Init+0x1c4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_I2C_Init+0x150>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e012      	b.n	8002ae6 <HAL_I2C_Init+0x176>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Init+0x17e>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_I2C_Init+0x1c4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <HAL_I2C_Init+0x1a4>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e58      	subs	r0, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Init+0x1c4>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	6809      	ldr	r1, [r1, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6911      	ldr	r1, [r2, #16]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	000186a0 	.word	0x000186a0
 8002bd0:	001e847f 	.word	0x001e847f
 8002bd4:	003d08ff 	.word	0x003d08ff
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7fe fe4c 	bl	8001890 <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 80e0 	bne.w	8002dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2319      	movs	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4970      	ldr	r1, [pc, #448]	; (8002dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fa92 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e0d3      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x50>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0cc      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d007      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2221      	movs	r2, #33	; 0x21
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2210      	movs	r2, #16
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	893a      	ldrh	r2, [r7, #8]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a50      	ldr	r2, [pc, #320]	; (8002dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f9ca 	bl	8003038 <I2C_MasterRequestWrite>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08d      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc4:	e066      	b.n	8002d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fb0c 	bl	80032e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d11b      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0x188>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fafc 	bl	800336a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e01a      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d194      	bne.n	8002cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	00100002 	.word	0x00100002
 8002dd8:	ffff0000 	.word	0xffff0000

08002ddc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	460b      	mov	r3, r1
 8002dea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7fe fd50 	bl	8001890 <HAL_GetTick>
 8002df0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	f040 8110 	bne.w	8003024 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2319      	movs	r3, #25
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4988      	ldr	r1, [pc, #544]	; (8003030 <HAL_I2C_IsDeviceReady+0x254>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f994 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e103      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_I2C_IsDeviceReady+0x50>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e0fc      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d007      	beq.n	8002e52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2224      	movs	r2, #36	; 0x24
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a70      	ldr	r2, [pc, #448]	; (8003034 <HAL_I2C_IsDeviceReady+0x258>)
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f952 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0b6      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb8:	897b      	ldrh	r3, [r7, #10]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fce2 	bl	8001890 <HAL_GetTick>
 8002ecc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002efc:	e025      	b.n	8002f4a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe fcc7 	bl	8001890 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <HAL_I2C_IsDeviceReady+0x138>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	22a0      	movs	r2, #160	; 0xa0
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2ba0      	cmp	r3, #160	; 0xa0
 8002f54:	d005      	beq.n	8002f62 <HAL_I2C_IsDeviceReady+0x186>
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <HAL_I2C_IsDeviceReady+0x186>
 8002f5c:	7dbb      	ldrb	r3, [r7, #22]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0cd      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d129      	bne.n	8002fcc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f86:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2319      	movs	r3, #25
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4922      	ldr	r1, [pc, #136]	; (8003030 <HAL_I2C_IsDeviceReady+0x254>)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f8c7 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e036      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e02c      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2319      	movs	r3, #25
 8002fec:	2201      	movs	r2, #1
 8002fee:	4910      	ldr	r1, [pc, #64]	; (8003030 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f8a3 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e012      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	3301      	adds	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	f4ff af33 	bcc.w	8002e76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	00100002 	.word	0x00100002
 8003034:	ffff0000 	.word	0xffff0000

08003038 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d006      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d003      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003060:	d108      	bne.n	8003074 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e00b      	b.n	800308c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b12      	cmp	r3, #18
 800307a:	d107      	bne.n	800308c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f84f 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e035      	b.n	800312a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c6:	d108      	bne.n	80030da <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c8:	897b      	ldrh	r3, [r7, #10]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d6:	611a      	str	r2, [r3, #16]
 80030d8:	e01b      	b.n	8003112 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	11db      	asrs	r3, r3, #7
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f003 0306 	and.w	r3, r3, #6
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f063 030f 	orn	r3, r3, #15
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	490f      	ldr	r1, [pc, #60]	; (8003134 <I2C_MasterRequestWrite+0xfc>)
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f876 	bl	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e010      	b.n	800312a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003108:	897b      	ldrh	r3, [r7, #10]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <I2C_MasterRequestWrite+0x100>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f866 	bl	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	00010008 	.word	0x00010008
 8003138:	00010002 	.word	0x00010002

0800313c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	e025      	b.n	800319a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d021      	beq.n	800319a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fe fb9b 	bl	8001890 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e023      	b.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10d      	bne.n	80031c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	e00c      	b.n	80031da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d0b6      	beq.n	800314e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f8:	e051      	b.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003208:	d123      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003222:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0204 	orr.w	r2, r3, #4
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e046      	b.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d021      	beq.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe fb19 	bl	8001890 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e020      	b.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10c      	bne.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e00b      	b.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d18d      	bne.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f4:	e02d      	b.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f878 	bl	80033ec <I2C_IsAcknowledgeFailed>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02d      	b.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d021      	beq.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fe fabf 	bl	8001890 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d116      	bne.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d1ca      	bne.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003376:	e02d      	b.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f837 	bl	80033ec <I2C_IsAcknowledgeFailed>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e02d      	b.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d021      	beq.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	f7fe fa7e 	bl	8001890 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d116      	bne.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e007      	b.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d1ca      	bne.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d11b      	bne.n	800343c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b20      	cmp	r3, #32
 800345e:	d129      	bne.n	80034b4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	; 0x24
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0210 	bic.w	r2, r2, #16
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d12a      	bne.n	8003532 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	f023 030f 	bic.w	r3, r3, #15
 8003502:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b29a      	uxth	r2, r3
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	4313      	orrs	r3, r2
 800350c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	89fa      	ldrh	r2, [r7, #14]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800356c:	f7fe f990 	bl	8001890 <HAL_GetTick>
 8003570:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003572:	e009      	b.n	8003588 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003574:	f7fe f98c 	bl	8001890 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003582:	d901      	bls.n	8003588 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e01f      	b.n	80035c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d1ee      	bne.n	8003574 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800359c:	f7fe f978 	bl	8001890 <HAL_GetTick>
 80035a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a2:	e009      	b.n	80035b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035a4:	f7fe f974 	bl	8001890 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b2:	d901      	bls.n	80035b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e007      	b.n	80035c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035b8:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c4:	d1ee      	bne.n	80035a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	420e0040 	.word	0x420e0040
 80035d8:	40007000 	.word	0x40007000
 80035dc:	420e0044 	.word	0x420e0044

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e25b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fe:	4ba3      	ldr	r3, [pc, #652]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00c      	beq.n	8003624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4ba0      	ldr	r3, [pc, #640]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d112      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b9d      	ldr	r3, [pc, #628]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003622:	d10b      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	4b99      	ldr	r3, [pc, #612]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d157      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e236      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x74>
 8003646:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a87      	ldr	r2, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe f8fa 	bl	8001890 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe f8f6 	bl	8001890 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1fb      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe f8e6 	bl	8001890 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe f8e2 	bl	8001890 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1e7      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11c      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1bb      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b56      	ldr	r3, [pc, #344]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4952      	ldr	r1, [pc, #328]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e03a      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe f89b 	bl	8001890 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375e:	f7fe f897 	bl	8001890 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e19c      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4940      	ldr	r1, [pc, #256]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe f87a 	bl	8001890 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fe f876 	bl	8001890 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e17b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d030      	beq.n	800382c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe f85a 	bl	8001890 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe f856 	bl	8001890 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e15b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x200>
 80037fe:	e015      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe f843 	bl	8001890 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe f83f 	bl	8001890 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e144      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a0 	beq.w	800397a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fe f805 	bl	8001890 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e011      	b.n	80038ae <HAL_RCC_OscConfig+0x2ce>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
 8003898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fd fff8 	bl	8001890 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0fd      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <HAL_RCC_OscConfig+0x4d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
 80038c2:	4b7d      	ldr	r3, [pc, #500]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a7c      	ldr	r2, [pc, #496]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e01c      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b77      	ldr	r3, [pc, #476]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a76      	ldr	r2, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	4b74      	ldr	r3, [pc, #464]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a73      	ldr	r2, [pc, #460]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	e00b      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038f2:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a70      	ldr	r2, [pc, #448]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	4b6e      	ldr	r3, [pc, #440]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a6d      	ldr	r2, [pc, #436]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fd ffbd 	bl	8001890 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fd ffb9 	bl	8001890 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0bc      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ee      	beq.n	800391a <HAL_RCC_OscConfig+0x33a>
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd ffa7 	bl	8001890 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd ffa3 	bl	8001890 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0a6      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a51      	ldr	r2, [pc, #324]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8092 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d05c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d141      	bne.n	8003a1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b48      	ldr	r3, [pc, #288]	; (8003abc <HAL_RCC_OscConfig+0x4dc>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fd ff77 	bl	8001890 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fd ff73 	bl	8001890 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e078      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	019b      	lsls	r3, r3, #6
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	4933      	ldr	r1, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_RCC_OscConfig+0x4dc>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd ff4c 	bl	8001890 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd ff48 	bl	8001890 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e04d      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x41c>
 8003a1a:	e045      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x4dc>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd ff35 	bl	8001890 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fd ff31 	bl	8001890 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e036      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x44a>
 8003a48:	e02e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e029      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <HAL_RCC_OscConfig+0x4d8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d10d      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	42470060 	.word	0x42470060

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fe6e 	bl	8001890 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fe6a 	bl	8001890 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd fdce 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	08006da4 	.word	0x08006da4
 8003c84:	2000006c 	.word	0x2000006c
 8003c88:	20000070 	.word	0x20000070

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca2:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d007      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x32>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x38>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 80b4 	bne.w	8003e20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cba:	60bb      	str	r3, [r7, #8]
       break;
 8003cbc:	e0b3      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cbe:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cc0:	60bb      	str	r3, [r7, #8]
      break;
 8003cc2:	e0b0      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc4:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ccc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cce:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04a      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cda:	4b55      	ldr	r3, [pc, #340]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	ea03 0501 	and.w	r5, r3, r1
 8003cf0:	ea04 0602 	and.w	r6, r4, r2
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	0154      	lsls	r4, r2, #5
 8003d02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d06:	014b      	lsls	r3, r1, #5
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	1b49      	subs	r1, r1, r5
 8003d0e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	0194      	lsls	r4, r2, #6
 8003d1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d20:	018b      	lsls	r3, r1, #6
 8003d22:	1a5b      	subs	r3, r3, r1
 8003d24:	eb64 0402 	sbc.w	r4, r4, r2
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	00e2      	lsls	r2, r4, #3
 8003d32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d36:	00d9      	lsls	r1, r3, #3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	195b      	adds	r3, r3, r5
 8003d3e:	eb44 0406 	adc.w	r4, r4, r6
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	0262      	lsls	r2, r4, #9
 8003d4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d50:	0259      	lsls	r1, r3, #9
 8003d52:	460b      	mov	r3, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	4621      	mov	r1, r4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	f7fc fa94 	bl	8000290 <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e049      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	ea03 0501 	and.w	r5, r3, r1
 8003d86:	ea04 0602 	and.w	r6, r4, r2
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	0154      	lsls	r4, r2, #5
 8003d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d9c:	014b      	lsls	r3, r1, #5
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4622      	mov	r2, r4
 8003da2:	1b49      	subs	r1, r1, r5
 8003da4:	eb62 0206 	sbc.w	r2, r2, r6
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	f04f 0400 	mov.w	r4, #0
 8003db0:	0194      	lsls	r4, r2, #6
 8003db2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	1a5b      	subs	r3, r3, r1
 8003dba:	eb64 0402 	sbc.w	r4, r4, r2
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dcc:	00d9      	lsls	r1, r3, #3
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	195b      	adds	r3, r3, r5
 8003dd4:	eb44 0406 	adc.w	r4, r4, r6
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	02a2      	lsls	r2, r4, #10
 8003de2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003de6:	0299      	lsls	r1, r3, #10
 8003de8:	460b      	mov	r3, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	4621      	mov	r1, r4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0400 	mov.w	r4, #0
 8003df6:	461a      	mov	r2, r3
 8003df8:	4623      	mov	r3, r4
 8003dfa:	f7fc fa49 	bl	8000290 <__aeabi_uldivmod>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e22:	60bb      	str	r3, [r7, #8]
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	68bb      	ldr	r3, [r7, #8]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	007a1200 	.word	0x007a1200

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000006c 	.word	0x2000006c

08003e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e58:	f7ff fff0 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4a03      	ldr	r2, [pc, #12]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08006db4 	.word	0x08006db4

08003e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e80:	f7ff ffdc 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e84:	4601      	mov	r1, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0b5b      	lsrs	r3, r3, #13
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08006db4 	.word	0x08006db4

08003ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d075      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ed8:	4bad      	ldr	r3, [pc, #692]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ede:	f7fd fcd7 	bl	8001890 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ee6:	f7fd fcd3 	bl	8001890 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e18b      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef8:	4ba6      	ldr	r3, [pc, #664]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	019a      	lsls	r2, r3, #6
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	071b      	lsls	r3, r3, #28
 8003f1c:	499d      	ldr	r1, [pc, #628]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01f      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f30:	4b98      	ldr	r3, [pc, #608]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	0f1b      	lsrs	r3, r3, #28
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	019a      	lsls	r2, r3, #6
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	071b      	lsls	r3, r3, #28
 8003f50:	4990      	ldr	r1, [pc, #576]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f58:	4b8e      	ldr	r3, [pc, #568]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5e:	f023 021f 	bic.w	r2, r3, #31
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	498a      	ldr	r1, [pc, #552]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	019a      	lsls	r2, r3, #6
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	071b      	lsls	r3, r3, #28
 8003f90:	4980      	ldr	r1, [pc, #512]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f98:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd fc77 	bl	8001890 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fa6:	f7fd fc73 	bl	8001890 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e12b      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb8:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d079      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fdc:	4b6e      	ldr	r3, [pc, #440]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fe2:	f7fd fc55 	bl	8001890 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fea:	f7fd fc51 	bl	8001890 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e109      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ffc:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004008:	d0ef      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d020      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004016:	4b5f      	ldr	r3, [pc, #380]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	0f1b      	lsrs	r3, r3, #28
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	019a      	lsls	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	431a      	orrs	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	4957      	ldr	r1, [pc, #348]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800403e:	4b55      	ldr	r3, [pc, #340]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004044:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	3b01      	subs	r3, #1
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	4950      	ldr	r1, [pc, #320]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	0e1b      	lsrs	r3, r3, #24
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	019a      	lsls	r2, r3, #6
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	071b      	lsls	r3, r3, #28
 8004084:	4943      	ldr	r1, [pc, #268]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800408c:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800408e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	493e      	ldr	r1, [pc, #248]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fd fbf2 	bl	8001890 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040b0:	f7fd fbee 	bl	8001890 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0a6      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c2:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ce:	d1ef      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 808d 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a2b      	ldr	r2, [pc, #172]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040fa:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a27      	ldr	r2, [pc, #156]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004106:	f7fd fbc3 	bl	8001890 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800410e:	f7fd fbbf 	bl	8001890 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e077      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004134:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d039      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d032      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d11e      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004172:	f7fd fb8d 	bl	8001890 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	e014      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fd fb89 	bl	8001890 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d90b      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e03f      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004190:	42470068 	.word	0x42470068
 8004194:	40023800 	.word	0x40023800
 8004198:	42470070 	.word	0x42470070
 800419c:	40007000 	.word	0x40007000
 80041a0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a4:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0e4      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041bc:	d10d      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80041be:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d2:	4911      	ldr	r1, [pc, #68]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]
 80041d8:	e005      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f2:	4909      	ldr	r1, [pc, #36]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800420a:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800420c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40023800 	.word	0x40023800
 800421c:	424711e0 	.word	0x424711e0

08004220 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e083      	b.n	800433a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7f5b      	ldrb	r3, [r3, #29]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd f90c 	bl	8001460 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	22ca      	movs	r2, #202	; 0xca
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2253      	movs	r2, #83	; 0x53
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f897 	bl	8004392 <RTC_EnterInitMode>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2204      	movs	r2, #4
 8004276:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e05e      	b.n	800433a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800428a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6899      	ldr	r1, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68d2      	ldr	r2, [r2, #12]
 80042b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6919      	ldr	r1, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	041a      	lsls	r2, r3, #16
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f829 	bl	8004342 <HAL_RTC_WaitForSynchro>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	22ff      	movs	r2, #255	; 0xff
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2204      	movs	r2, #4
 8004302:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e018      	b.n	800433a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004338:	2300      	movs	r3, #0
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800435e:	f7fd fa97 	bl	8001890 <HAL_GetTick>
 8004362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004364:	e009      	b.n	800437a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004366:	f7fd fa93 	bl	8001890 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004374:	d901      	bls.n	800437a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e007      	b.n	800438a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d119      	bne.n	80043e0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	f7fd fa6b 	bl	8001890 <HAL_GetTick>
 80043ba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80043bc:	e009      	b.n	80043d2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80043be:	f7fd fa67 	bl	8001890 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043cc:	d901      	bls.n	80043d2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e007      	b.n	80043e2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ee      	beq.n	80043be <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e01d      	b.n	8004438 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fd f83b 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 fa15 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d007      	beq.n	800447a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0202 	mvn.w	r2, #2
 80044b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9a5 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f997 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f9a8 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d122      	bne.n	8004538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d11b      	bne.n	8004538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0204 	mvn.w	r2, #4
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f97b 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f96d 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f97e 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b08      	cmp	r3, #8
 8004544:	d122      	bne.n	800458c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0208 	mvn.w	r2, #8
 800455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2204      	movs	r2, #4
 8004562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f951 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f943 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f954 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b10      	cmp	r3, #16
 8004598:	d122      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d11b      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0210 	mvn.w	r2, #16
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2208      	movs	r2, #8
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f927 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f919 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f92a 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d10e      	bne.n	800460c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d107      	bne.n	800460c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0201 	mvn.w	r2, #1
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc f886 	bl	8000718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d10e      	bne.n	8004638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004624:	2b80      	cmp	r3, #128	; 0x80
 8004626:	d107      	bne.n	8004638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fad0 	bl	8004bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8ef 	bl	8004842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b20      	cmp	r3, #32
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0220 	mvn.w	r2, #32
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa9a 	bl	8004bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIM_ConfigClockSource+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e0a6      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x166>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d067      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0x120>
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d80b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x6c>
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d073      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0x140>
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d802      	bhi.n	80046fa <HAL_TIM_ConfigClockSource+0x62>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d06f      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046f8:	e078      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d06c      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0x140>
 80046fe:	2b30      	cmp	r3, #48	; 0x30
 8004700:	d06a      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004702:	e073      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004704:	2b70      	cmp	r3, #112	; 0x70
 8004706:	d00d      	beq.n	8004724 <HAL_TIM_ConfigClockSource+0x8c>
 8004708:	2b70      	cmp	r3, #112	; 0x70
 800470a:	d804      	bhi.n	8004716 <HAL_TIM_ConfigClockSource+0x7e>
 800470c:	2b50      	cmp	r3, #80	; 0x50
 800470e:	d033      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xe0>
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d041      	beq.n	8004798 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004714:	e06a      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471a:	d066      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x152>
 800471c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004720:	d017      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004722:	e063      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6899      	ldr	r1, [r3, #8]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f000 f9aa 	bl	8004a8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004746:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e04c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f000 f993 	bl	8004a8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e039      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	461a      	mov	r2, r3
 8004786:	f000 f907 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2150      	movs	r1, #80	; 0x50
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f960 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004796:	e029      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	461a      	mov	r2, r3
 80047a6:	f000 f926 	bl	80049f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2160      	movs	r1, #96	; 0x60
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f950 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80047b6:	e019      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	461a      	mov	r2, r3
 80047c6:	f000 f8e7 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2140      	movs	r1, #64	; 0x40
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f940 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80047d6:	e009      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f000 f937 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80047e8:	e000      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a40      	ldr	r2, [pc, #256]	; (800496c <TIM_Base_SetConfig+0x114>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d00f      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3d      	ldr	r2, [pc, #244]	; (8004970 <TIM_Base_SetConfig+0x118>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a3c      	ldr	r2, [pc, #240]	; (8004974 <TIM_Base_SetConfig+0x11c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a3b      	ldr	r2, [pc, #236]	; (8004978 <TIM_Base_SetConfig+0x120>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a3a      	ldr	r2, [pc, #232]	; (800497c <TIM_Base_SetConfig+0x124>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2f      	ldr	r2, [pc, #188]	; (800496c <TIM_Base_SetConfig+0x114>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02b      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d027      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <TIM_Base_SetConfig+0x118>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d023      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a2b      	ldr	r2, [pc, #172]	; (8004974 <TIM_Base_SetConfig+0x11c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01f      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2a      	ldr	r2, [pc, #168]	; (8004978 <TIM_Base_SetConfig+0x120>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01b      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a29      	ldr	r2, [pc, #164]	; (800497c <TIM_Base_SetConfig+0x124>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d017      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a28      	ldr	r2, [pc, #160]	; (8004980 <TIM_Base_SetConfig+0x128>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a27      	ldr	r2, [pc, #156]	; (8004984 <TIM_Base_SetConfig+0x12c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00f      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a26      	ldr	r2, [pc, #152]	; (8004988 <TIM_Base_SetConfig+0x130>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00b      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a25      	ldr	r2, [pc, #148]	; (800498c <TIM_Base_SetConfig+0x134>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a24      	ldr	r2, [pc, #144]	; (8004990 <TIM_Base_SetConfig+0x138>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <TIM_Base_SetConfig+0x13c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d108      	bne.n	800491c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0xf8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <TIM_Base_SetConfig+0x124>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d103      	bne.n	8004958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	615a      	str	r2, [r3, #20]
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40010400 	.word	0x40010400
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800
 800498c:	40001800 	.word	0x40001800
 8004990:	40001c00 	.word	0x40001c00
 8004994:	40002000 	.word	0x40002000

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f043 0307 	orr.w	r3, r3, #7
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e05a      	b.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d01d      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10c      	bne.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40001800 	.word	0x40001800

08004bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e03f      	b.n	8004c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fc60 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb4b 	bl	80052cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b088      	sub	sp, #32
 8004c8a:	af02      	add	r7, sp, #8
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	f040 8083 	bne.w	8004dae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_Transmit+0x2e>
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e07b      	b.n	8004db0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Transmit+0x40>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e074      	b.n	8004db0 <HAL_UART_Transmit+0x12a>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2221      	movs	r2, #33	; 0x21
 8004cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004cdc:	f7fc fdd8 	bl	8001890 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004cf6:	e042      	b.n	8004d7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d122      	bne.n	8004d56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f96a 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e042      	b.n	8004db0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	e017      	b.n	8004d7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	e013      	b.n	8004d7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	; 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f947 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e01f      	b.n	8004db0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	60ba      	str	r2, [r7, #8]
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1b7      	bne.n	8004cf8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2140      	movs	r1, #64	; 0x40
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f92e 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e006      	b.n	8004db0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_UART_IRQHandler+0x52>
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9e0 	bl	80051c8 <UART_Receive_IT>
      return;
 8004e08:	e0d1      	b.n	8004fae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80b0 	beq.w	8004f72 <HAL_UART_IRQHandler+0x1ba>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <HAL_UART_IRQHandler+0x70>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80a5 	beq.w	8004f72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_UART_IRQHandler+0x90>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	f043 0201 	orr.w	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_UART_IRQHandler+0xb0>
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	f043 0202 	orr.w	r2, r3, #2
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_UART_IRQHandler+0xd0>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	f043 0204 	orr.w	r2, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00f      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xfa>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_UART_IRQHandler+0xee>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	f043 0208 	orr.w	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d078      	beq.n	8004fac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x11c>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f97a 	bl	80051c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <HAL_UART_IRQHandler+0x144>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d031      	beq.n	8004f60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f8c3 	bl	8005088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d123      	bne.n	8004f58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <HAL_UART_IRQHandler+0x1fc>)
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd fb1c 	bl	8002572 <HAL_DMA_Abort_IT>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d016      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4e:	e00e      	b.n	8004f6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f845 	bl	8004fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f56:	e00a      	b.n	8004f6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f841 	bl	8004fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5e:	e006      	b.n	8004f6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f83d 	bl	8004fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f6c:	e01e      	b.n	8004fac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6e:	bf00      	nop
    return;
 8004f70:	e01c      	b.n	8004fac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1d6>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8b0 	bl	80050ec <UART_Transmit_IT>
    return;
 8004f8c:	e00f      	b.n	8004fae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_UART_IRQHandler+0x1f6>
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8f8 	bl	8005198 <UART_EndTransmit_IT>
    return;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <HAL_UART_IRQHandler+0x1f6>
    return;
 8004fac:	bf00      	nop
  }
}
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	080050c5 	.word	0x080050c5

08004fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	e02c      	b.n	8005060 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d028      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <UART_WaitOnFlagUntilTimeout+0x30>
 8005014:	f7fc fc3c 	bl	8001890 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d21d      	bcs.n	8005060 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005032:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e00f      	b.n	8005080 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	429a      	cmp	r2, r3
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	429a      	cmp	r2, r3
 800507c:	d0c3      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800509e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff ff7e 	bl	8004fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b21      	cmp	r3, #33	; 0x21
 80050fe:	d144      	bne.n	800518a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005108:	d11a      	bne.n	8005140 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]
 8005132:	e00e      	b.n	8005152 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]
 800513e:	e008      	b.n	8005152 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6211      	str	r1, [r2, #32]
 800514a:	781a      	ldrb	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4619      	mov	r1, r3
 8005160:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005174:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005184:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fefd 	bl	8004fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b22      	cmp	r3, #34	; 0x22
 80051da:	d171      	bne.n	80052c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d123      	bne.n	800522e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10e      	bne.n	8005212 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	629a      	str	r2, [r3, #40]	; 0x28
 8005210:	e029      	b.n	8005266 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	b29b      	uxth	r3, r3
 800521a:	b2db      	uxtb	r3, r3
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
 800522c:	e01b      	b.n	8005266 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6858      	ldr	r0, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	1c59      	adds	r1, r3, #1
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6291      	str	r1, [r2, #40]	; 0x28
 8005246:	b2c2      	uxtb	r2, r0
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e00c      	b.n	8005266 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	b2da      	uxtb	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	1c58      	adds	r0, r3, #1
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	6288      	str	r0, [r1, #40]	; 0x28
 800525e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29b      	uxth	r3, r3
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4619      	mov	r1, r3
 8005274:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005276:	2b00      	cmp	r3, #0
 8005278:	d120      	bne.n	80052bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0220 	bic.w	r2, r2, #32
 8005288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005298:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fe8a 	bl	8004fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e002      	b.n	80052c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800530e:	f023 030c 	bic.w	r3, r3, #12
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	430b      	orrs	r3, r1
 800531a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800533a:	f040 818b 	bne.w	8005654 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4ac1      	ldr	r2, [pc, #772]	; (8005648 <UART_SetConfig+0x37c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d005      	beq.n	8005354 <UART_SetConfig+0x88>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4abf      	ldr	r2, [pc, #764]	; (800564c <UART_SetConfig+0x380>)
 800534e:	4293      	cmp	r3, r2
 8005350:	f040 80bd 	bne.w	80054ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005354:	f7fe fd92 	bl	8003e7c <HAL_RCC_GetPCLK2Freq>
 8005358:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	461d      	mov	r5, r3
 800535e:	f04f 0600 	mov.w	r6, #0
 8005362:	46a8      	mov	r8, r5
 8005364:	46b1      	mov	r9, r6
 8005366:	eb18 0308 	adds.w	r3, r8, r8
 800536a:	eb49 0409 	adc.w	r4, r9, r9
 800536e:	4698      	mov	r8, r3
 8005370:	46a1      	mov	r9, r4
 8005372:	eb18 0805 	adds.w	r8, r8, r5
 8005376:	eb49 0906 	adc.w	r9, r9, r6
 800537a:	f04f 0100 	mov.w	r1, #0
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005386:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800538a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800538e:	4688      	mov	r8, r1
 8005390:	4691      	mov	r9, r2
 8005392:	eb18 0005 	adds.w	r0, r8, r5
 8005396:	eb49 0106 	adc.w	r1, r9, r6
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	461d      	mov	r5, r3
 80053a0:	f04f 0600 	mov.w	r6, #0
 80053a4:	196b      	adds	r3, r5, r5
 80053a6:	eb46 0406 	adc.w	r4, r6, r6
 80053aa:	461a      	mov	r2, r3
 80053ac:	4623      	mov	r3, r4
 80053ae:	f7fa ff6f 	bl	8000290 <__aeabi_uldivmod>
 80053b2:	4603      	mov	r3, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	461a      	mov	r2, r3
 80053b8:	4ba5      	ldr	r3, [pc, #660]	; (8005650 <UART_SetConfig+0x384>)
 80053ba:	fba3 2302 	umull	r2, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	461d      	mov	r5, r3
 80053c8:	f04f 0600 	mov.w	r6, #0
 80053cc:	46a9      	mov	r9, r5
 80053ce:	46b2      	mov	sl, r6
 80053d0:	eb19 0309 	adds.w	r3, r9, r9
 80053d4:	eb4a 040a 	adc.w	r4, sl, sl
 80053d8:	4699      	mov	r9, r3
 80053da:	46a2      	mov	sl, r4
 80053dc:	eb19 0905 	adds.w	r9, r9, r5
 80053e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80053e4:	f04f 0100 	mov.w	r1, #0
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053f8:	4689      	mov	r9, r1
 80053fa:	4692      	mov	sl, r2
 80053fc:	eb19 0005 	adds.w	r0, r9, r5
 8005400:	eb4a 0106 	adc.w	r1, sl, r6
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	461d      	mov	r5, r3
 800540a:	f04f 0600 	mov.w	r6, #0
 800540e:	196b      	adds	r3, r5, r5
 8005410:	eb46 0406 	adc.w	r4, r6, r6
 8005414:	461a      	mov	r2, r3
 8005416:	4623      	mov	r3, r4
 8005418:	f7fa ff3a 	bl	8000290 <__aeabi_uldivmod>
 800541c:	4603      	mov	r3, r0
 800541e:	460c      	mov	r4, r1
 8005420:	461a      	mov	r2, r3
 8005422:	4b8b      	ldr	r3, [pc, #556]	; (8005650 <UART_SetConfig+0x384>)
 8005424:	fba3 1302 	umull	r1, r3, r3, r2
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	2164      	movs	r1, #100	; 0x64
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	3332      	adds	r3, #50	; 0x32
 8005436:	4a86      	ldr	r2, [pc, #536]	; (8005650 <UART_SetConfig+0x384>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005444:	4498      	add	r8, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	461d      	mov	r5, r3
 800544a:	f04f 0600 	mov.w	r6, #0
 800544e:	46a9      	mov	r9, r5
 8005450:	46b2      	mov	sl, r6
 8005452:	eb19 0309 	adds.w	r3, r9, r9
 8005456:	eb4a 040a 	adc.w	r4, sl, sl
 800545a:	4699      	mov	r9, r3
 800545c:	46a2      	mov	sl, r4
 800545e:	eb19 0905 	adds.w	r9, r9, r5
 8005462:	eb4a 0a06 	adc.w	sl, sl, r6
 8005466:	f04f 0100 	mov.w	r1, #0
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800547a:	4689      	mov	r9, r1
 800547c:	4692      	mov	sl, r2
 800547e:	eb19 0005 	adds.w	r0, r9, r5
 8005482:	eb4a 0106 	adc.w	r1, sl, r6
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	461d      	mov	r5, r3
 800548c:	f04f 0600 	mov.w	r6, #0
 8005490:	196b      	adds	r3, r5, r5
 8005492:	eb46 0406 	adc.w	r4, r6, r6
 8005496:	461a      	mov	r2, r3
 8005498:	4623      	mov	r3, r4
 800549a:	f7fa fef9 	bl	8000290 <__aeabi_uldivmod>
 800549e:	4603      	mov	r3, r0
 80054a0:	460c      	mov	r4, r1
 80054a2:	461a      	mov	r2, r3
 80054a4:	4b6a      	ldr	r3, [pc, #424]	; (8005650 <UART_SetConfig+0x384>)
 80054a6:	fba3 1302 	umull	r1, r3, r3, r2
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	2164      	movs	r1, #100	; 0x64
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	3332      	adds	r3, #50	; 0x32
 80054b8:	4a65      	ldr	r2, [pc, #404]	; (8005650 <UART_SetConfig+0x384>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	f003 0207 	and.w	r2, r3, #7
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4442      	add	r2, r8
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e26f      	b.n	80059ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ce:	f7fe fcc1 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 80054d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	461d      	mov	r5, r3
 80054d8:	f04f 0600 	mov.w	r6, #0
 80054dc:	46a8      	mov	r8, r5
 80054de:	46b1      	mov	r9, r6
 80054e0:	eb18 0308 	adds.w	r3, r8, r8
 80054e4:	eb49 0409 	adc.w	r4, r9, r9
 80054e8:	4698      	mov	r8, r3
 80054ea:	46a1      	mov	r9, r4
 80054ec:	eb18 0805 	adds.w	r8, r8, r5
 80054f0:	eb49 0906 	adc.w	r9, r9, r6
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005500:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005504:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005508:	4688      	mov	r8, r1
 800550a:	4691      	mov	r9, r2
 800550c:	eb18 0005 	adds.w	r0, r8, r5
 8005510:	eb49 0106 	adc.w	r1, r9, r6
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	461d      	mov	r5, r3
 800551a:	f04f 0600 	mov.w	r6, #0
 800551e:	196b      	adds	r3, r5, r5
 8005520:	eb46 0406 	adc.w	r4, r6, r6
 8005524:	461a      	mov	r2, r3
 8005526:	4623      	mov	r3, r4
 8005528:	f7fa feb2 	bl	8000290 <__aeabi_uldivmod>
 800552c:	4603      	mov	r3, r0
 800552e:	460c      	mov	r4, r1
 8005530:	461a      	mov	r2, r3
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <UART_SetConfig+0x384>)
 8005534:	fba3 2302 	umull	r2, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	461d      	mov	r5, r3
 8005542:	f04f 0600 	mov.w	r6, #0
 8005546:	46a9      	mov	r9, r5
 8005548:	46b2      	mov	sl, r6
 800554a:	eb19 0309 	adds.w	r3, r9, r9
 800554e:	eb4a 040a 	adc.w	r4, sl, sl
 8005552:	4699      	mov	r9, r3
 8005554:	46a2      	mov	sl, r4
 8005556:	eb19 0905 	adds.w	r9, r9, r5
 800555a:	eb4a 0a06 	adc.w	sl, sl, r6
 800555e:	f04f 0100 	mov.w	r1, #0
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800556a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800556e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005572:	4689      	mov	r9, r1
 8005574:	4692      	mov	sl, r2
 8005576:	eb19 0005 	adds.w	r0, r9, r5
 800557a:	eb4a 0106 	adc.w	r1, sl, r6
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	461d      	mov	r5, r3
 8005584:	f04f 0600 	mov.w	r6, #0
 8005588:	196b      	adds	r3, r5, r5
 800558a:	eb46 0406 	adc.w	r4, r6, r6
 800558e:	461a      	mov	r2, r3
 8005590:	4623      	mov	r3, r4
 8005592:	f7fa fe7d 	bl	8000290 <__aeabi_uldivmod>
 8005596:	4603      	mov	r3, r0
 8005598:	460c      	mov	r4, r1
 800559a:	461a      	mov	r2, r3
 800559c:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <UART_SetConfig+0x384>)
 800559e:	fba3 1302 	umull	r1, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2164      	movs	r1, #100	; 0x64
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	3332      	adds	r3, #50	; 0x32
 80055b0:	4a27      	ldr	r2, [pc, #156]	; (8005650 <UART_SetConfig+0x384>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055be:	4498      	add	r8, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	461d      	mov	r5, r3
 80055c4:	f04f 0600 	mov.w	r6, #0
 80055c8:	46a9      	mov	r9, r5
 80055ca:	46b2      	mov	sl, r6
 80055cc:	eb19 0309 	adds.w	r3, r9, r9
 80055d0:	eb4a 040a 	adc.w	r4, sl, sl
 80055d4:	4699      	mov	r9, r3
 80055d6:	46a2      	mov	sl, r4
 80055d8:	eb19 0905 	adds.w	r9, r9, r5
 80055dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055f4:	4689      	mov	r9, r1
 80055f6:	4692      	mov	sl, r2
 80055f8:	eb19 0005 	adds.w	r0, r9, r5
 80055fc:	eb4a 0106 	adc.w	r1, sl, r6
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	461d      	mov	r5, r3
 8005606:	f04f 0600 	mov.w	r6, #0
 800560a:	196b      	adds	r3, r5, r5
 800560c:	eb46 0406 	adc.w	r4, r6, r6
 8005610:	461a      	mov	r2, r3
 8005612:	4623      	mov	r3, r4
 8005614:	f7fa fe3c 	bl	8000290 <__aeabi_uldivmod>
 8005618:	4603      	mov	r3, r0
 800561a:	460c      	mov	r4, r1
 800561c:	461a      	mov	r2, r3
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <UART_SetConfig+0x384>)
 8005620:	fba3 1302 	umull	r1, r3, r3, r2
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	2164      	movs	r1, #100	; 0x64
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	3332      	adds	r3, #50	; 0x32
 8005632:	4a07      	ldr	r2, [pc, #28]	; (8005650 <UART_SetConfig+0x384>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	f003 0207 	and.w	r2, r3, #7
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4442      	add	r2, r8
 8005644:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005646:	e1b2      	b.n	80059ae <UART_SetConfig+0x6e2>
 8005648:	40011000 	.word	0x40011000
 800564c:	40011400 	.word	0x40011400
 8005650:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4ad7      	ldr	r2, [pc, #860]	; (80059b8 <UART_SetConfig+0x6ec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d005      	beq.n	800566a <UART_SetConfig+0x39e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4ad6      	ldr	r2, [pc, #856]	; (80059bc <UART_SetConfig+0x6f0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	f040 80d1 	bne.w	800580c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800566a:	f7fe fc07 	bl	8003e7c <HAL_RCC_GetPCLK2Freq>
 800566e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	469a      	mov	sl, r3
 8005674:	f04f 0b00 	mov.w	fp, #0
 8005678:	46d0      	mov	r8, sl
 800567a:	46d9      	mov	r9, fp
 800567c:	eb18 0308 	adds.w	r3, r8, r8
 8005680:	eb49 0409 	adc.w	r4, r9, r9
 8005684:	4698      	mov	r8, r3
 8005686:	46a1      	mov	r9, r4
 8005688:	eb18 080a 	adds.w	r8, r8, sl
 800568c:	eb49 090b 	adc.w	r9, r9, fp
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800569c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056a4:	4688      	mov	r8, r1
 80056a6:	4691      	mov	r9, r2
 80056a8:	eb1a 0508 	adds.w	r5, sl, r8
 80056ac:	eb4b 0609 	adc.w	r6, fp, r9
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4619      	mov	r1, r3
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	0094      	lsls	r4, r2, #2
 80056c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056c8:	008b      	lsls	r3, r1, #2
 80056ca:	461a      	mov	r2, r3
 80056cc:	4623      	mov	r3, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	4631      	mov	r1, r6
 80056d2:	f7fa fddd 	bl	8000290 <__aeabi_uldivmod>
 80056d6:	4603      	mov	r3, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	461a      	mov	r2, r3
 80056dc:	4bb8      	ldr	r3, [pc, #736]	; (80059c0 <UART_SetConfig+0x6f4>)
 80056de:	fba3 2302 	umull	r2, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	469b      	mov	fp, r3
 80056ec:	f04f 0c00 	mov.w	ip, #0
 80056f0:	46d9      	mov	r9, fp
 80056f2:	46e2      	mov	sl, ip
 80056f4:	eb19 0309 	adds.w	r3, r9, r9
 80056f8:	eb4a 040a 	adc.w	r4, sl, sl
 80056fc:	4699      	mov	r9, r3
 80056fe:	46a2      	mov	sl, r4
 8005700:	eb19 090b 	adds.w	r9, r9, fp
 8005704:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005714:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005718:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800571c:	4689      	mov	r9, r1
 800571e:	4692      	mov	sl, r2
 8005720:	eb1b 0509 	adds.w	r5, fp, r9
 8005724:	eb4c 060a 	adc.w	r6, ip, sl
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4619      	mov	r1, r3
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	f04f 0400 	mov.w	r4, #0
 800573a:	0094      	lsls	r4, r2, #2
 800573c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005740:	008b      	lsls	r3, r1, #2
 8005742:	461a      	mov	r2, r3
 8005744:	4623      	mov	r3, r4
 8005746:	4628      	mov	r0, r5
 8005748:	4631      	mov	r1, r6
 800574a:	f7fa fda1 	bl	8000290 <__aeabi_uldivmod>
 800574e:	4603      	mov	r3, r0
 8005750:	460c      	mov	r4, r1
 8005752:	461a      	mov	r2, r3
 8005754:	4b9a      	ldr	r3, [pc, #616]	; (80059c0 <UART_SetConfig+0x6f4>)
 8005756:	fba3 1302 	umull	r1, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2164      	movs	r1, #100	; 0x64
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	3332      	adds	r3, #50	; 0x32
 8005768:	4a95      	ldr	r2, [pc, #596]	; (80059c0 <UART_SetConfig+0x6f4>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005774:	4498      	add	r8, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	469b      	mov	fp, r3
 800577a:	f04f 0c00 	mov.w	ip, #0
 800577e:	46d9      	mov	r9, fp
 8005780:	46e2      	mov	sl, ip
 8005782:	eb19 0309 	adds.w	r3, r9, r9
 8005786:	eb4a 040a 	adc.w	r4, sl, sl
 800578a:	4699      	mov	r9, r3
 800578c:	46a2      	mov	sl, r4
 800578e:	eb19 090b 	adds.w	r9, r9, fp
 8005792:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005796:	f04f 0100 	mov.w	r1, #0
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057aa:	4689      	mov	r9, r1
 80057ac:	4692      	mov	sl, r2
 80057ae:	eb1b 0509 	adds.w	r5, fp, r9
 80057b2:	eb4c 060a 	adc.w	r6, ip, sl
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	4619      	mov	r1, r3
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	f04f 0400 	mov.w	r4, #0
 80057c8:	0094      	lsls	r4, r2, #2
 80057ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057ce:	008b      	lsls	r3, r1, #2
 80057d0:	461a      	mov	r2, r3
 80057d2:	4623      	mov	r3, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	4631      	mov	r1, r6
 80057d8:	f7fa fd5a 	bl	8000290 <__aeabi_uldivmod>
 80057dc:	4603      	mov	r3, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b77      	ldr	r3, [pc, #476]	; (80059c0 <UART_SetConfig+0x6f4>)
 80057e4:	fba3 1302 	umull	r1, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	2164      	movs	r1, #100	; 0x64
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	3332      	adds	r3, #50	; 0x32
 80057f6:	4a72      	ldr	r2, [pc, #456]	; (80059c0 <UART_SetConfig+0x6f4>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	f003 020f 	and.w	r2, r3, #15
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4442      	add	r2, r8
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	e0d0      	b.n	80059ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fe fb22 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8005810:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	469a      	mov	sl, r3
 8005816:	f04f 0b00 	mov.w	fp, #0
 800581a:	46d0      	mov	r8, sl
 800581c:	46d9      	mov	r9, fp
 800581e:	eb18 0308 	adds.w	r3, r8, r8
 8005822:	eb49 0409 	adc.w	r4, r9, r9
 8005826:	4698      	mov	r8, r3
 8005828:	46a1      	mov	r9, r4
 800582a:	eb18 080a 	adds.w	r8, r8, sl
 800582e:	eb49 090b 	adc.w	r9, r9, fp
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800583e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005842:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005846:	4688      	mov	r8, r1
 8005848:	4691      	mov	r9, r2
 800584a:	eb1a 0508 	adds.w	r5, sl, r8
 800584e:	eb4b 0609 	adc.w	r6, fp, r9
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4619      	mov	r1, r3
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	f04f 0400 	mov.w	r4, #0
 8005864:	0094      	lsls	r4, r2, #2
 8005866:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800586a:	008b      	lsls	r3, r1, #2
 800586c:	461a      	mov	r2, r3
 800586e:	4623      	mov	r3, r4
 8005870:	4628      	mov	r0, r5
 8005872:	4631      	mov	r1, r6
 8005874:	f7fa fd0c 	bl	8000290 <__aeabi_uldivmod>
 8005878:	4603      	mov	r3, r0
 800587a:	460c      	mov	r4, r1
 800587c:	461a      	mov	r2, r3
 800587e:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <UART_SetConfig+0x6f4>)
 8005880:	fba3 2302 	umull	r2, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	469b      	mov	fp, r3
 800588e:	f04f 0c00 	mov.w	ip, #0
 8005892:	46d9      	mov	r9, fp
 8005894:	46e2      	mov	sl, ip
 8005896:	eb19 0309 	adds.w	r3, r9, r9
 800589a:	eb4a 040a 	adc.w	r4, sl, sl
 800589e:	4699      	mov	r9, r3
 80058a0:	46a2      	mov	sl, r4
 80058a2:	eb19 090b 	adds.w	r9, r9, fp
 80058a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058aa:	f04f 0100 	mov.w	r1, #0
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058be:	4689      	mov	r9, r1
 80058c0:	4692      	mov	sl, r2
 80058c2:	eb1b 0509 	adds.w	r5, fp, r9
 80058c6:	eb4c 060a 	adc.w	r6, ip, sl
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4619      	mov	r1, r3
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	0094      	lsls	r4, r2, #2
 80058de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058e2:	008b      	lsls	r3, r1, #2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	4631      	mov	r1, r6
 80058ec:	f7fa fcd0 	bl	8000290 <__aeabi_uldivmod>
 80058f0:	4603      	mov	r3, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <UART_SetConfig+0x6f4>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	; 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	3332      	adds	r3, #50	; 0x32
 800590a:	4a2d      	ldr	r2, [pc, #180]	; (80059c0 <UART_SetConfig+0x6f4>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005916:	4498      	add	r8, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	469b      	mov	fp, r3
 800591c:	f04f 0c00 	mov.w	ip, #0
 8005920:	46d9      	mov	r9, fp
 8005922:	46e2      	mov	sl, ip
 8005924:	eb19 0309 	adds.w	r3, r9, r9
 8005928:	eb4a 040a 	adc.w	r4, sl, sl
 800592c:	4699      	mov	r9, r3
 800592e:	46a2      	mov	sl, r4
 8005930:	eb19 090b 	adds.w	r9, r9, fp
 8005934:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005938:	f04f 0100 	mov.w	r1, #0
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800594c:	4689      	mov	r9, r1
 800594e:	4692      	mov	sl, r2
 8005950:	eb1b 0509 	adds.w	r5, fp, r9
 8005954:	eb4c 060a 	adc.w	r6, ip, sl
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4619      	mov	r1, r3
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	f04f 0400 	mov.w	r4, #0
 800596a:	0094      	lsls	r4, r2, #2
 800596c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005970:	008b      	lsls	r3, r1, #2
 8005972:	461a      	mov	r2, r3
 8005974:	4623      	mov	r3, r4
 8005976:	4628      	mov	r0, r5
 8005978:	4631      	mov	r1, r6
 800597a:	f7fa fc89 	bl	8000290 <__aeabi_uldivmod>
 800597e:	4603      	mov	r3, r0
 8005980:	460c      	mov	r4, r1
 8005982:	461a      	mov	r2, r3
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <UART_SetConfig+0x6f4>)
 8005986:	fba3 1302 	umull	r1, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2164      	movs	r1, #100	; 0x64
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	3332      	adds	r3, #50	; 0x32
 8005998:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <UART_SetConfig+0x6f4>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4442      	add	r2, r8
 80059aa:	609a      	str	r2, [r3, #8]
}
 80059ac:	e7ff      	b.n	80059ae <UART_SetConfig+0x6e2>
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b8:	40011000 	.word	0x40011000
 80059bc:	40011400 	.word	0x40011400
 80059c0:	51eb851f 	.word	0x51eb851f

080059c4 <__errno>:
 80059c4:	4b01      	ldr	r3, [pc, #4]	; (80059cc <__errno+0x8>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000078 	.word	0x20000078

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4e0d      	ldr	r6, [pc, #52]	; (8005a08 <__libc_init_array+0x38>)
 80059d4:	4c0d      	ldr	r4, [pc, #52]	; (8005a0c <__libc_init_array+0x3c>)
 80059d6:	1ba4      	subs	r4, r4, r6
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	2500      	movs	r5, #0
 80059dc:	42a5      	cmp	r5, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	4e0b      	ldr	r6, [pc, #44]	; (8005a10 <__libc_init_array+0x40>)
 80059e2:	4c0c      	ldr	r4, [pc, #48]	; (8005a14 <__libc_init_array+0x44>)
 80059e4:	f001 f92c 	bl	8006c40 <_init>
 80059e8:	1ba4      	subs	r4, r4, r6
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	2500      	movs	r5, #0
 80059ee:	42a5      	cmp	r5, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059f8:	4798      	blx	r3
 80059fa:	3501      	adds	r5, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a02:	4798      	blx	r3
 8005a04:	3501      	adds	r5, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	08006e5c 	.word	0x08006e5c
 8005a0c:	08006e5c 	.word	0x08006e5c
 8005a10:	08006e5c 	.word	0x08006e5c
 8005a14:	08006e60 	.word	0x08006e60

08005a18 <memset>:
 8005a18:	4402      	add	r2, r0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d100      	bne.n	8005a22 <memset+0xa>
 8005a20:	4770      	bx	lr
 8005a22:	f803 1b01 	strb.w	r1, [r3], #1
 8005a26:	e7f9      	b.n	8005a1c <memset+0x4>

08005a28 <iprintf>:
 8005a28:	b40f      	push	{r0, r1, r2, r3}
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <iprintf+0x2c>)
 8005a2c:	b513      	push	{r0, r1, r4, lr}
 8005a2e:	681c      	ldr	r4, [r3, #0]
 8005a30:	b124      	cbz	r4, 8005a3c <iprintf+0x14>
 8005a32:	69a3      	ldr	r3, [r4, #24]
 8005a34:	b913      	cbnz	r3, 8005a3c <iprintf+0x14>
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 fa42 	bl	8005ec0 <__sinit>
 8005a3c:	ab05      	add	r3, sp, #20
 8005a3e:	9a04      	ldr	r2, [sp, #16]
 8005a40:	68a1      	ldr	r1, [r4, #8]
 8005a42:	9301      	str	r3, [sp, #4]
 8005a44:	4620      	mov	r0, r4
 8005a46:	f000 fd4d 	bl	80064e4 <_vfiprintf_r>
 8005a4a:	b002      	add	sp, #8
 8005a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a50:	b004      	add	sp, #16
 8005a52:	4770      	bx	lr
 8005a54:	20000078 	.word	0x20000078

08005a58 <_puts_r>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	460e      	mov	r6, r1
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	b118      	cbz	r0, 8005a68 <_puts_r+0x10>
 8005a60:	6983      	ldr	r3, [r0, #24]
 8005a62:	b90b      	cbnz	r3, 8005a68 <_puts_r+0x10>
 8005a64:	f000 fa2c 	bl	8005ec0 <__sinit>
 8005a68:	69ab      	ldr	r3, [r5, #24]
 8005a6a:	68ac      	ldr	r4, [r5, #8]
 8005a6c:	b913      	cbnz	r3, 8005a74 <_puts_r+0x1c>
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 fa26 	bl	8005ec0 <__sinit>
 8005a74:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <_puts_r+0xac>)
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d117      	bne.n	8005aaa <_puts_r+0x52>
 8005a7a:	686c      	ldr	r4, [r5, #4]
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	071b      	lsls	r3, r3, #28
 8005a80:	d51d      	bpl.n	8005abe <_puts_r+0x66>
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	b1db      	cbz	r3, 8005abe <_puts_r+0x66>
 8005a86:	3e01      	subs	r6, #1
 8005a88:	68a3      	ldr	r3, [r4, #8]
 8005a8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	b9e9      	cbnz	r1, 8005ad0 <_puts_r+0x78>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da2e      	bge.n	8005af6 <_puts_r+0x9e>
 8005a98:	4622      	mov	r2, r4
 8005a9a:	210a      	movs	r1, #10
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f85f 	bl	8005b60 <__swbuf_r>
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d011      	beq.n	8005aca <_puts_r+0x72>
 8005aa6:	200a      	movs	r0, #10
 8005aa8:	e011      	b.n	8005ace <_puts_r+0x76>
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <_puts_r+0xb0>)
 8005aac:	429c      	cmp	r4, r3
 8005aae:	d101      	bne.n	8005ab4 <_puts_r+0x5c>
 8005ab0:	68ac      	ldr	r4, [r5, #8]
 8005ab2:	e7e3      	b.n	8005a7c <_puts_r+0x24>
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <_puts_r+0xb4>)
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	bf08      	it	eq
 8005aba:	68ec      	ldreq	r4, [r5, #12]
 8005abc:	e7de      	b.n	8005a7c <_puts_r+0x24>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 f89f 	bl	8005c04 <__swsetup_r>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d0dd      	beq.n	8005a86 <_puts_r+0x2e>
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da04      	bge.n	8005ade <_puts_r+0x86>
 8005ad4:	69a2      	ldr	r2, [r4, #24]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	dc06      	bgt.n	8005ae8 <_puts_r+0x90>
 8005ada:	290a      	cmp	r1, #10
 8005adc:	d004      	beq.n	8005ae8 <_puts_r+0x90>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	7019      	strb	r1, [r3, #0]
 8005ae6:	e7cf      	b.n	8005a88 <_puts_r+0x30>
 8005ae8:	4622      	mov	r2, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f838 	bl	8005b60 <__swbuf_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1c9      	bne.n	8005a88 <_puts_r+0x30>
 8005af4:	e7e9      	b.n	8005aca <_puts_r+0x72>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	200a      	movs	r0, #10
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	6022      	str	r2, [r4, #0]
 8005afe:	7018      	strb	r0, [r3, #0]
 8005b00:	e7e5      	b.n	8005ace <_puts_r+0x76>
 8005b02:	bf00      	nop
 8005b04:	08006de0 	.word	0x08006de0
 8005b08:	08006e00 	.word	0x08006e00
 8005b0c:	08006dc0 	.word	0x08006dc0

08005b10 <puts>:
 8005b10:	4b02      	ldr	r3, [pc, #8]	; (8005b1c <puts+0xc>)
 8005b12:	4601      	mov	r1, r0
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	f7ff bf9f 	b.w	8005a58 <_puts_r>
 8005b1a:	bf00      	nop
 8005b1c:	20000078 	.word	0x20000078

08005b20 <siprintf>:
 8005b20:	b40e      	push	{r1, r2, r3}
 8005b22:	b500      	push	{lr}
 8005b24:	b09c      	sub	sp, #112	; 0x70
 8005b26:	ab1d      	add	r3, sp, #116	; 0x74
 8005b28:	9002      	str	r0, [sp, #8]
 8005b2a:	9006      	str	r0, [sp, #24]
 8005b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b30:	4809      	ldr	r0, [pc, #36]	; (8005b58 <siprintf+0x38>)
 8005b32:	9107      	str	r1, [sp, #28]
 8005b34:	9104      	str	r1, [sp, #16]
 8005b36:	4909      	ldr	r1, [pc, #36]	; (8005b5c <siprintf+0x3c>)
 8005b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3c:	9105      	str	r1, [sp, #20]
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	a902      	add	r1, sp, #8
 8005b44:	f000 fbac 	bl	80062a0 <_svfiprintf_r>
 8005b48:	9b02      	ldr	r3, [sp, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	b01c      	add	sp, #112	; 0x70
 8005b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b54:	b003      	add	sp, #12
 8005b56:	4770      	bx	lr
 8005b58:	20000078 	.word	0x20000078
 8005b5c:	ffff0208 	.word	0xffff0208

08005b60 <__swbuf_r>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	460e      	mov	r6, r1
 8005b64:	4614      	mov	r4, r2
 8005b66:	4605      	mov	r5, r0
 8005b68:	b118      	cbz	r0, 8005b72 <__swbuf_r+0x12>
 8005b6a:	6983      	ldr	r3, [r0, #24]
 8005b6c:	b90b      	cbnz	r3, 8005b72 <__swbuf_r+0x12>
 8005b6e:	f000 f9a7 	bl	8005ec0 <__sinit>
 8005b72:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <__swbuf_r+0x98>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d12a      	bne.n	8005bce <__swbuf_r+0x6e>
 8005b78:	686c      	ldr	r4, [r5, #4]
 8005b7a:	69a3      	ldr	r3, [r4, #24]
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	071a      	lsls	r2, r3, #28
 8005b82:	d52e      	bpl.n	8005be2 <__swbuf_r+0x82>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b363      	cbz	r3, 8005be2 <__swbuf_r+0x82>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	6820      	ldr	r0, [r4, #0]
 8005b8c:	1ac0      	subs	r0, r0, r3
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	b2f6      	uxtb	r6, r6
 8005b92:	4283      	cmp	r3, r0
 8005b94:	4637      	mov	r7, r6
 8005b96:	dc04      	bgt.n	8005ba2 <__swbuf_r+0x42>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 f926 	bl	8005dec <_fflush_r>
 8005ba0:	bb28      	cbnz	r0, 8005bee <__swbuf_r+0x8e>
 8005ba2:	68a3      	ldr	r3, [r4, #8]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	6022      	str	r2, [r4, #0]
 8005bae:	701e      	strb	r6, [r3, #0]
 8005bb0:	6963      	ldr	r3, [r4, #20]
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	4283      	cmp	r3, r0
 8005bb6:	d004      	beq.n	8005bc2 <__swbuf_r+0x62>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	07db      	lsls	r3, r3, #31
 8005bbc:	d519      	bpl.n	8005bf2 <__swbuf_r+0x92>
 8005bbe:	2e0a      	cmp	r6, #10
 8005bc0:	d117      	bne.n	8005bf2 <__swbuf_r+0x92>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f911 	bl	8005dec <_fflush_r>
 8005bca:	b190      	cbz	r0, 8005bf2 <__swbuf_r+0x92>
 8005bcc:	e00f      	b.n	8005bee <__swbuf_r+0x8e>
 8005bce:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <__swbuf_r+0x9c>)
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	d101      	bne.n	8005bd8 <__swbuf_r+0x78>
 8005bd4:	68ac      	ldr	r4, [r5, #8]
 8005bd6:	e7d0      	b.n	8005b7a <__swbuf_r+0x1a>
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <__swbuf_r+0xa0>)
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	bf08      	it	eq
 8005bde:	68ec      	ldreq	r4, [r5, #12]
 8005be0:	e7cb      	b.n	8005b7a <__swbuf_r+0x1a>
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 f80d 	bl	8005c04 <__swsetup_r>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d0cc      	beq.n	8005b88 <__swbuf_r+0x28>
 8005bee:	f04f 37ff 	mov.w	r7, #4294967295
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08006de0 	.word	0x08006de0
 8005bfc:	08006e00 	.word	0x08006e00
 8005c00:	08006dc0 	.word	0x08006dc0

08005c04 <__swsetup_r>:
 8005c04:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <__swsetup_r+0xcc>)
 8005c06:	b570      	push	{r4, r5, r6, lr}
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	b125      	cbz	r5, 8005c1a <__swsetup_r+0x16>
 8005c10:	69ab      	ldr	r3, [r5, #24]
 8005c12:	b913      	cbnz	r3, 8005c1a <__swsetup_r+0x16>
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 f953 	bl	8005ec0 <__sinit>
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <__swsetup_r+0xd0>)
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d10f      	bne.n	8005c40 <__swsetup_r+0x3c>
 8005c20:	686c      	ldr	r4, [r5, #4]
 8005c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	0715      	lsls	r5, r2, #28
 8005c2a:	d42c      	bmi.n	8005c86 <__swsetup_r+0x82>
 8005c2c:	06d0      	lsls	r0, r2, #27
 8005c2e:	d411      	bmi.n	8005c54 <__swsetup_r+0x50>
 8005c30:	2209      	movs	r2, #9
 8005c32:	6032      	str	r2, [r6, #0]
 8005c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	e03e      	b.n	8005cbe <__swsetup_r+0xba>
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <__swsetup_r+0xd4>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d101      	bne.n	8005c4a <__swsetup_r+0x46>
 8005c46:	68ac      	ldr	r4, [r5, #8]
 8005c48:	e7eb      	b.n	8005c22 <__swsetup_r+0x1e>
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <__swsetup_r+0xd8>)
 8005c4c:	429c      	cmp	r4, r3
 8005c4e:	bf08      	it	eq
 8005c50:	68ec      	ldreq	r4, [r5, #12]
 8005c52:	e7e6      	b.n	8005c22 <__swsetup_r+0x1e>
 8005c54:	0751      	lsls	r1, r2, #29
 8005c56:	d512      	bpl.n	8005c7e <__swsetup_r+0x7a>
 8005c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5a:	b141      	cbz	r1, 8005c6e <__swsetup_r+0x6a>
 8005c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c60:	4299      	cmp	r1, r3
 8005c62:	d002      	beq.n	8005c6a <__swsetup_r+0x66>
 8005c64:	4630      	mov	r0, r6
 8005c66:	f000 fa19 	bl	800609c <_free_r>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	2300      	movs	r3, #0
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f043 0308 	orr.w	r3, r3, #8
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	b94b      	cbnz	r3, 8005c9e <__swsetup_r+0x9a>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c94:	d003      	beq.n	8005c9e <__swsetup_r+0x9a>
 8005c96:	4621      	mov	r1, r4
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f9bf 	bl	800601c <__smakebuf_r>
 8005c9e:	89a2      	ldrh	r2, [r4, #12]
 8005ca0:	f012 0301 	ands.w	r3, r2, #1
 8005ca4:	d00c      	beq.n	8005cc0 <__swsetup_r+0xbc>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6963      	ldr	r3, [r4, #20]
 8005cac:	425b      	negs	r3, r3
 8005cae:	61a3      	str	r3, [r4, #24]
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	b953      	cbnz	r3, 8005cca <__swsetup_r+0xc6>
 8005cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005cbc:	d1ba      	bne.n	8005c34 <__swsetup_r+0x30>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	0792      	lsls	r2, r2, #30
 8005cc2:	bf58      	it	pl
 8005cc4:	6963      	ldrpl	r3, [r4, #20]
 8005cc6:	60a3      	str	r3, [r4, #8]
 8005cc8:	e7f2      	b.n	8005cb0 <__swsetup_r+0xac>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e7f7      	b.n	8005cbe <__swsetup_r+0xba>
 8005cce:	bf00      	nop
 8005cd0:	20000078 	.word	0x20000078
 8005cd4:	08006de0 	.word	0x08006de0
 8005cd8:	08006e00 	.word	0x08006e00
 8005cdc:	08006dc0 	.word	0x08006dc0

08005ce0 <__sflush_r>:
 8005ce0:	898a      	ldrh	r2, [r1, #12]
 8005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	0710      	lsls	r0, r2, #28
 8005cea:	460c      	mov	r4, r1
 8005cec:	d458      	bmi.n	8005da0 <__sflush_r+0xc0>
 8005cee:	684b      	ldr	r3, [r1, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dc05      	bgt.n	8005d00 <__sflush_r+0x20>
 8005cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dc02      	bgt.n	8005d00 <__sflush_r+0x20>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d02:	2e00      	cmp	r6, #0
 8005d04:	d0f9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d0c:	682f      	ldr	r7, [r5, #0]
 8005d0e:	6a21      	ldr	r1, [r4, #32]
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	d032      	beq.n	8005d7a <__sflush_r+0x9a>
 8005d14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	075a      	lsls	r2, r3, #29
 8005d1a:	d505      	bpl.n	8005d28 <__sflush_r+0x48>
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	1ac0      	subs	r0, r0, r3
 8005d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d22:	b10b      	cbz	r3, 8005d28 <__sflush_r+0x48>
 8005d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d26:	1ac0      	subs	r0, r0, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d2e:	6a21      	ldr	r1, [r4, #32]
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b0      	blx	r6
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	d106      	bne.n	8005d48 <__sflush_r+0x68>
 8005d3a:	6829      	ldr	r1, [r5, #0]
 8005d3c:	291d      	cmp	r1, #29
 8005d3e:	d848      	bhi.n	8005dd2 <__sflush_r+0xf2>
 8005d40:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <__sflush_r+0x108>)
 8005d42:	40ca      	lsrs	r2, r1
 8005d44:	07d6      	lsls	r6, r2, #31
 8005d46:	d544      	bpl.n	8005dd2 <__sflush_r+0xf2>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6062      	str	r2, [r4, #4]
 8005d4c:	04d9      	lsls	r1, r3, #19
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	d504      	bpl.n	8005d5e <__sflush_r+0x7e>
 8005d54:	1c42      	adds	r2, r0, #1
 8005d56:	d101      	bne.n	8005d5c <__sflush_r+0x7c>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b903      	cbnz	r3, 8005d5e <__sflush_r+0x7e>
 8005d5c:	6560      	str	r0, [r4, #84]	; 0x54
 8005d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d60:	602f      	str	r7, [r5, #0]
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d0c9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	d002      	beq.n	8005d74 <__sflush_r+0x94>
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f994 	bl	800609c <_free_r>
 8005d74:	2000      	movs	r0, #0
 8005d76:	6360      	str	r0, [r4, #52]	; 0x34
 8005d78:	e7c0      	b.n	8005cfc <__sflush_r+0x1c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b0      	blx	r6
 8005d80:	1c41      	adds	r1, r0, #1
 8005d82:	d1c8      	bne.n	8005d16 <__sflush_r+0x36>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0c5      	beq.n	8005d16 <__sflush_r+0x36>
 8005d8a:	2b1d      	cmp	r3, #29
 8005d8c:	d001      	beq.n	8005d92 <__sflush_r+0xb2>
 8005d8e:	2b16      	cmp	r3, #22
 8005d90:	d101      	bne.n	8005d96 <__sflush_r+0xb6>
 8005d92:	602f      	str	r7, [r5, #0]
 8005d94:	e7b1      	b.n	8005cfa <__sflush_r+0x1a>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	e7ad      	b.n	8005cfc <__sflush_r+0x1c>
 8005da0:	690f      	ldr	r7, [r1, #16]
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	d0a9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005da6:	0793      	lsls	r3, r2, #30
 8005da8:	680e      	ldr	r6, [r1, #0]
 8005daa:	bf08      	it	eq
 8005dac:	694b      	ldreq	r3, [r1, #20]
 8005dae:	600f      	str	r7, [r1, #0]
 8005db0:	bf18      	it	ne
 8005db2:	2300      	movne	r3, #0
 8005db4:	eba6 0807 	sub.w	r8, r6, r7
 8005db8:	608b      	str	r3, [r1, #8]
 8005dba:	f1b8 0f00 	cmp.w	r8, #0
 8005dbe:	dd9c      	ble.n	8005cfa <__sflush_r+0x1a>
 8005dc0:	4643      	mov	r3, r8
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	6a21      	ldr	r1, [r4, #32]
 8005dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	dc06      	bgt.n	8005dde <__sflush_r+0xfe>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	e78e      	b.n	8005cfc <__sflush_r+0x1c>
 8005dde:	4407      	add	r7, r0
 8005de0:	eba8 0800 	sub.w	r8, r8, r0
 8005de4:	e7e9      	b.n	8005dba <__sflush_r+0xda>
 8005de6:	bf00      	nop
 8005de8:	20400001 	.word	0x20400001

08005dec <_fflush_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	4605      	mov	r5, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	b1db      	cbz	r3, 8005e2e <_fflush_r+0x42>
 8005df6:	b118      	cbz	r0, 8005e00 <_fflush_r+0x14>
 8005df8:	6983      	ldr	r3, [r0, #24]
 8005dfa:	b90b      	cbnz	r3, 8005e00 <_fflush_r+0x14>
 8005dfc:	f000 f860 	bl	8005ec0 <__sinit>
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <_fflush_r+0x48>)
 8005e02:	429c      	cmp	r4, r3
 8005e04:	d109      	bne.n	8005e1a <_fflush_r+0x2e>
 8005e06:	686c      	ldr	r4, [r5, #4]
 8005e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e0c:	b17b      	cbz	r3, 8005e2e <_fflush_r+0x42>
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e16:	f7ff bf63 	b.w	8005ce0 <__sflush_r>
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <_fflush_r+0x4c>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	d101      	bne.n	8005e24 <_fflush_r+0x38>
 8005e20:	68ac      	ldr	r4, [r5, #8]
 8005e22:	e7f1      	b.n	8005e08 <_fflush_r+0x1c>
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <_fflush_r+0x50>)
 8005e26:	429c      	cmp	r4, r3
 8005e28:	bf08      	it	eq
 8005e2a:	68ec      	ldreq	r4, [r5, #12]
 8005e2c:	e7ec      	b.n	8005e08 <_fflush_r+0x1c>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	08006de0 	.word	0x08006de0
 8005e38:	08006e00 	.word	0x08006e00
 8005e3c:	08006dc0 	.word	0x08006dc0

08005e40 <std>:
 8005e40:	2300      	movs	r3, #0
 8005e42:	b510      	push	{r4, lr}
 8005e44:	4604      	mov	r4, r0
 8005e46:	e9c0 3300 	strd	r3, r3, [r0]
 8005e4a:	6083      	str	r3, [r0, #8]
 8005e4c:	8181      	strh	r1, [r0, #12]
 8005e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e50:	81c2      	strh	r2, [r0, #14]
 8005e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e56:	6183      	str	r3, [r0, #24]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	305c      	adds	r0, #92	; 0x5c
 8005e5e:	f7ff fddb 	bl	8005a18 <memset>
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <std+0x38>)
 8005e64:	6263      	str	r3, [r4, #36]	; 0x24
 8005e66:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <std+0x3c>)
 8005e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <std+0x40>)
 8005e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <std+0x44>)
 8005e70:	6224      	str	r4, [r4, #32]
 8005e72:	6323      	str	r3, [r4, #48]	; 0x30
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop
 8005e78:	08006a41 	.word	0x08006a41
 8005e7c:	08006a63 	.word	0x08006a63
 8005e80:	08006a9b 	.word	0x08006a9b
 8005e84:	08006abf 	.word	0x08006abf

08005e88 <_cleanup_r>:
 8005e88:	4901      	ldr	r1, [pc, #4]	; (8005e90 <_cleanup_r+0x8>)
 8005e8a:	f000 b885 	b.w	8005f98 <_fwalk_reent>
 8005e8e:	bf00      	nop
 8005e90:	08005ded 	.word	0x08005ded

08005e94 <__sfmoreglue>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	1e4a      	subs	r2, r1, #1
 8005e98:	2568      	movs	r5, #104	; 0x68
 8005e9a:	4355      	muls	r5, r2
 8005e9c:	460e      	mov	r6, r1
 8005e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ea2:	f000 f949 	bl	8006138 <_malloc_r>
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	b140      	cbz	r0, 8005ebc <__sfmoreglue+0x28>
 8005eaa:	2100      	movs	r1, #0
 8005eac:	e9c0 1600 	strd	r1, r6, [r0]
 8005eb0:	300c      	adds	r0, #12
 8005eb2:	60a0      	str	r0, [r4, #8]
 8005eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005eb8:	f7ff fdae 	bl	8005a18 <memset>
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}

08005ec0 <__sinit>:
 8005ec0:	6983      	ldr	r3, [r0, #24]
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	bb33      	cbnz	r3, 8005f16 <__sinit+0x56>
 8005ec8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ecc:	6503      	str	r3, [r0, #80]	; 0x50
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <__sinit+0x58>)
 8005ed0:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <__sinit+0x5c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6282      	str	r2, [r0, #40]	; 0x28
 8005ed6:	4298      	cmp	r0, r3
 8005ed8:	bf04      	itt	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	6183      	streq	r3, [r0, #24]
 8005ede:	f000 f81f 	bl	8005f20 <__sfp>
 8005ee2:	6060      	str	r0, [r4, #4]
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 f81b 	bl	8005f20 <__sfp>
 8005eea:	60a0      	str	r0, [r4, #8]
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 f817 	bl	8005f20 <__sfp>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60e0      	str	r0, [r4, #12]
 8005ef6:	2104      	movs	r1, #4
 8005ef8:	6860      	ldr	r0, [r4, #4]
 8005efa:	f7ff ffa1 	bl	8005e40 <std>
 8005efe:	2201      	movs	r2, #1
 8005f00:	2109      	movs	r1, #9
 8005f02:	68a0      	ldr	r0, [r4, #8]
 8005f04:	f7ff ff9c 	bl	8005e40 <std>
 8005f08:	2202      	movs	r2, #2
 8005f0a:	2112      	movs	r1, #18
 8005f0c:	68e0      	ldr	r0, [r4, #12]
 8005f0e:	f7ff ff97 	bl	8005e40 <std>
 8005f12:	2301      	movs	r3, #1
 8005f14:	61a3      	str	r3, [r4, #24]
 8005f16:	bd10      	pop	{r4, pc}
 8005f18:	08006dbc 	.word	0x08006dbc
 8005f1c:	08005e89 	.word	0x08005e89

08005f20 <__sfp>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <__sfp+0x70>)
 8005f24:	681e      	ldr	r6, [r3, #0]
 8005f26:	69b3      	ldr	r3, [r6, #24]
 8005f28:	4607      	mov	r7, r0
 8005f2a:	b913      	cbnz	r3, 8005f32 <__sfp+0x12>
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ffc7 	bl	8005ec0 <__sinit>
 8005f32:	3648      	adds	r6, #72	; 0x48
 8005f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	d503      	bpl.n	8005f44 <__sfp+0x24>
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	b133      	cbz	r3, 8005f4e <__sfp+0x2e>
 8005f40:	6836      	ldr	r6, [r6, #0]
 8005f42:	e7f7      	b.n	8005f34 <__sfp+0x14>
 8005f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f48:	b16d      	cbz	r5, 8005f66 <__sfp+0x46>
 8005f4a:	3468      	adds	r4, #104	; 0x68
 8005f4c:	e7f4      	b.n	8005f38 <__sfp+0x18>
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ff9f 	bl	8005e94 <__sfmoreglue>
 8005f56:	6030      	str	r0, [r6, #0]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1f1      	bne.n	8005f40 <__sfp+0x20>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	4604      	mov	r4, r0
 8005f62:	4620      	mov	r0, r4
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <__sfp+0x74>)
 8005f68:	6665      	str	r5, [r4, #100]	; 0x64
 8005f6a:	e9c4 5500 	strd	r5, r5, [r4]
 8005f6e:	60a5      	str	r5, [r4, #8]
 8005f70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005f74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f80:	f7ff fd4a 	bl	8005a18 <memset>
 8005f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f8c:	e7e9      	b.n	8005f62 <__sfp+0x42>
 8005f8e:	bf00      	nop
 8005f90:	08006dbc 	.word	0x08006dbc
 8005f94:	ffff0001 	.word	0xffff0001

08005f98 <_fwalk_reent>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	4689      	mov	r9, r1
 8005fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	b914      	cbnz	r4, 8005fae <_fwalk_reent+0x16>
 8005fa8:	4630      	mov	r0, r6
 8005faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005fb2:	3f01      	subs	r7, #1
 8005fb4:	d501      	bpl.n	8005fba <_fwalk_reent+0x22>
 8005fb6:	6824      	ldr	r4, [r4, #0]
 8005fb8:	e7f5      	b.n	8005fa6 <_fwalk_reent+0xe>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d907      	bls.n	8005fd0 <_fwalk_reent+0x38>
 8005fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	d003      	beq.n	8005fd0 <_fwalk_reent+0x38>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4640      	mov	r0, r8
 8005fcc:	47c8      	blx	r9
 8005fce:	4306      	orrs	r6, r0
 8005fd0:	3568      	adds	r5, #104	; 0x68
 8005fd2:	e7ee      	b.n	8005fb2 <_fwalk_reent+0x1a>

08005fd4 <__swhatbuf_r>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	460e      	mov	r6, r1
 8005fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	b096      	sub	sp, #88	; 0x58
 8005fe0:	4614      	mov	r4, r2
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	da07      	bge.n	8005ff6 <__swhatbuf_r+0x22>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	89b3      	ldrh	r3, [r6, #12]
 8005fec:	061a      	lsls	r2, r3, #24
 8005fee:	d410      	bmi.n	8006012 <__swhatbuf_r+0x3e>
 8005ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff4:	e00e      	b.n	8006014 <__swhatbuf_r+0x40>
 8005ff6:	466a      	mov	r2, sp
 8005ff8:	f000 fd88 	bl	8006b0c <_fstat_r>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	dbf2      	blt.n	8005fe6 <__swhatbuf_r+0x12>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006006:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800600a:	425a      	negs	r2, r3
 800600c:	415a      	adcs	r2, r3
 800600e:	602a      	str	r2, [r5, #0]
 8006010:	e7ee      	b.n	8005ff0 <__swhatbuf_r+0x1c>
 8006012:	2340      	movs	r3, #64	; 0x40
 8006014:	2000      	movs	r0, #0
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	b016      	add	sp, #88	; 0x58
 800601a:	bd70      	pop	{r4, r5, r6, pc}

0800601c <__smakebuf_r>:
 800601c:	898b      	ldrh	r3, [r1, #12]
 800601e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006020:	079d      	lsls	r5, r3, #30
 8006022:	4606      	mov	r6, r0
 8006024:	460c      	mov	r4, r1
 8006026:	d507      	bpl.n	8006038 <__smakebuf_r+0x1c>
 8006028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2301      	movs	r3, #1
 8006032:	6163      	str	r3, [r4, #20]
 8006034:	b002      	add	sp, #8
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	ab01      	add	r3, sp, #4
 800603a:	466a      	mov	r2, sp
 800603c:	f7ff ffca 	bl	8005fd4 <__swhatbuf_r>
 8006040:	9900      	ldr	r1, [sp, #0]
 8006042:	4605      	mov	r5, r0
 8006044:	4630      	mov	r0, r6
 8006046:	f000 f877 	bl	8006138 <_malloc_r>
 800604a:	b948      	cbnz	r0, 8006060 <__smakebuf_r+0x44>
 800604c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006050:	059a      	lsls	r2, r3, #22
 8006052:	d4ef      	bmi.n	8006034 <__smakebuf_r+0x18>
 8006054:	f023 0303 	bic.w	r3, r3, #3
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	e7e3      	b.n	8006028 <__smakebuf_r+0xc>
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <__smakebuf_r+0x7c>)
 8006062:	62b3      	str	r3, [r6, #40]	; 0x28
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	6020      	str	r0, [r4, #0]
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	6163      	str	r3, [r4, #20]
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	6120      	str	r0, [r4, #16]
 8006076:	b15b      	cbz	r3, 8006090 <__smakebuf_r+0x74>
 8006078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607c:	4630      	mov	r0, r6
 800607e:	f000 fd57 	bl	8006b30 <_isatty_r>
 8006082:	b128      	cbz	r0, 8006090 <__smakebuf_r+0x74>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	431d      	orrs	r5, r3
 8006094:	81a5      	strh	r5, [r4, #12]
 8006096:	e7cd      	b.n	8006034 <__smakebuf_r+0x18>
 8006098:	08005e89 	.word	0x08005e89

0800609c <_free_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4605      	mov	r5, r0
 80060a0:	2900      	cmp	r1, #0
 80060a2:	d045      	beq.n	8006130 <_free_r+0x94>
 80060a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a8:	1f0c      	subs	r4, r1, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bfb8      	it	lt
 80060ae:	18e4      	addlt	r4, r4, r3
 80060b0:	f000 fd84 	bl	8006bbc <__malloc_lock>
 80060b4:	4a1f      	ldr	r2, [pc, #124]	; (8006134 <_free_r+0x98>)
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	4610      	mov	r0, r2
 80060ba:	b933      	cbnz	r3, 80060ca <_free_r+0x2e>
 80060bc:	6063      	str	r3, [r4, #4]
 80060be:	6014      	str	r4, [r2, #0]
 80060c0:	4628      	mov	r0, r5
 80060c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060c6:	f000 bd7a 	b.w	8006bbe <__malloc_unlock>
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	d90c      	bls.n	80060e8 <_free_r+0x4c>
 80060ce:	6821      	ldr	r1, [r4, #0]
 80060d0:	1862      	adds	r2, r4, r1
 80060d2:	4293      	cmp	r3, r2
 80060d4:	bf04      	itt	eq
 80060d6:	681a      	ldreq	r2, [r3, #0]
 80060d8:	685b      	ldreq	r3, [r3, #4]
 80060da:	6063      	str	r3, [r4, #4]
 80060dc:	bf04      	itt	eq
 80060de:	1852      	addeq	r2, r2, r1
 80060e0:	6022      	streq	r2, [r4, #0]
 80060e2:	6004      	str	r4, [r0, #0]
 80060e4:	e7ec      	b.n	80060c0 <_free_r+0x24>
 80060e6:	4613      	mov	r3, r2
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	b10a      	cbz	r2, 80060f0 <_free_r+0x54>
 80060ec:	42a2      	cmp	r2, r4
 80060ee:	d9fa      	bls.n	80060e6 <_free_r+0x4a>
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	1858      	adds	r0, r3, r1
 80060f4:	42a0      	cmp	r0, r4
 80060f6:	d10b      	bne.n	8006110 <_free_r+0x74>
 80060f8:	6820      	ldr	r0, [r4, #0]
 80060fa:	4401      	add	r1, r0
 80060fc:	1858      	adds	r0, r3, r1
 80060fe:	4282      	cmp	r2, r0
 8006100:	6019      	str	r1, [r3, #0]
 8006102:	d1dd      	bne.n	80060c0 <_free_r+0x24>
 8006104:	6810      	ldr	r0, [r2, #0]
 8006106:	6852      	ldr	r2, [r2, #4]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	4401      	add	r1, r0
 800610c:	6019      	str	r1, [r3, #0]
 800610e:	e7d7      	b.n	80060c0 <_free_r+0x24>
 8006110:	d902      	bls.n	8006118 <_free_r+0x7c>
 8006112:	230c      	movs	r3, #12
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	e7d3      	b.n	80060c0 <_free_r+0x24>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	1821      	adds	r1, r4, r0
 800611c:	428a      	cmp	r2, r1
 800611e:	bf04      	itt	eq
 8006120:	6811      	ldreq	r1, [r2, #0]
 8006122:	6852      	ldreq	r2, [r2, #4]
 8006124:	6062      	str	r2, [r4, #4]
 8006126:	bf04      	itt	eq
 8006128:	1809      	addeq	r1, r1, r0
 800612a:	6021      	streq	r1, [r4, #0]
 800612c:	605c      	str	r4, [r3, #4]
 800612e:	e7c7      	b.n	80060c0 <_free_r+0x24>
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	2000011c 	.word	0x2000011c

08006138 <_malloc_r>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	1ccd      	adds	r5, r1, #3
 800613c:	f025 0503 	bic.w	r5, r5, #3
 8006140:	3508      	adds	r5, #8
 8006142:	2d0c      	cmp	r5, #12
 8006144:	bf38      	it	cc
 8006146:	250c      	movcc	r5, #12
 8006148:	2d00      	cmp	r5, #0
 800614a:	4606      	mov	r6, r0
 800614c:	db01      	blt.n	8006152 <_malloc_r+0x1a>
 800614e:	42a9      	cmp	r1, r5
 8006150:	d903      	bls.n	800615a <_malloc_r+0x22>
 8006152:	230c      	movs	r3, #12
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	2000      	movs	r0, #0
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	f000 fd2f 	bl	8006bbc <__malloc_lock>
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <_malloc_r+0xac>)
 8006160:	6814      	ldr	r4, [r2, #0]
 8006162:	4621      	mov	r1, r4
 8006164:	b991      	cbnz	r1, 800618c <_malloc_r+0x54>
 8006166:	4c20      	ldr	r4, [pc, #128]	; (80061e8 <_malloc_r+0xb0>)
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	b91b      	cbnz	r3, 8006174 <_malloc_r+0x3c>
 800616c:	4630      	mov	r0, r6
 800616e:	f000 fc57 	bl	8006a20 <_sbrk_r>
 8006172:	6020      	str	r0, [r4, #0]
 8006174:	4629      	mov	r1, r5
 8006176:	4630      	mov	r0, r6
 8006178:	f000 fc52 	bl	8006a20 <_sbrk_r>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d124      	bne.n	80061ca <_malloc_r+0x92>
 8006180:	230c      	movs	r3, #12
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	4630      	mov	r0, r6
 8006186:	f000 fd1a 	bl	8006bbe <__malloc_unlock>
 800618a:	e7e4      	b.n	8006156 <_malloc_r+0x1e>
 800618c:	680b      	ldr	r3, [r1, #0]
 800618e:	1b5b      	subs	r3, r3, r5
 8006190:	d418      	bmi.n	80061c4 <_malloc_r+0x8c>
 8006192:	2b0b      	cmp	r3, #11
 8006194:	d90f      	bls.n	80061b6 <_malloc_r+0x7e>
 8006196:	600b      	str	r3, [r1, #0]
 8006198:	50cd      	str	r5, [r1, r3]
 800619a:	18cc      	adds	r4, r1, r3
 800619c:	4630      	mov	r0, r6
 800619e:	f000 fd0e 	bl	8006bbe <__malloc_unlock>
 80061a2:	f104 000b 	add.w	r0, r4, #11
 80061a6:	1d23      	adds	r3, r4, #4
 80061a8:	f020 0007 	bic.w	r0, r0, #7
 80061ac:	1ac3      	subs	r3, r0, r3
 80061ae:	d0d3      	beq.n	8006158 <_malloc_r+0x20>
 80061b0:	425a      	negs	r2, r3
 80061b2:	50e2      	str	r2, [r4, r3]
 80061b4:	e7d0      	b.n	8006158 <_malloc_r+0x20>
 80061b6:	428c      	cmp	r4, r1
 80061b8:	684b      	ldr	r3, [r1, #4]
 80061ba:	bf16      	itet	ne
 80061bc:	6063      	strne	r3, [r4, #4]
 80061be:	6013      	streq	r3, [r2, #0]
 80061c0:	460c      	movne	r4, r1
 80061c2:	e7eb      	b.n	800619c <_malloc_r+0x64>
 80061c4:	460c      	mov	r4, r1
 80061c6:	6849      	ldr	r1, [r1, #4]
 80061c8:	e7cc      	b.n	8006164 <_malloc_r+0x2c>
 80061ca:	1cc4      	adds	r4, r0, #3
 80061cc:	f024 0403 	bic.w	r4, r4, #3
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d005      	beq.n	80061e0 <_malloc_r+0xa8>
 80061d4:	1a21      	subs	r1, r4, r0
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 fc22 	bl	8006a20 <_sbrk_r>
 80061dc:	3001      	adds	r0, #1
 80061de:	d0cf      	beq.n	8006180 <_malloc_r+0x48>
 80061e0:	6025      	str	r5, [r4, #0]
 80061e2:	e7db      	b.n	800619c <_malloc_r+0x64>
 80061e4:	2000011c 	.word	0x2000011c
 80061e8:	20000120 	.word	0x20000120

080061ec <__ssputs_r>:
 80061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	688e      	ldr	r6, [r1, #8]
 80061f2:	429e      	cmp	r6, r3
 80061f4:	4682      	mov	sl, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	4690      	mov	r8, r2
 80061fa:	4699      	mov	r9, r3
 80061fc:	d837      	bhi.n	800626e <__ssputs_r+0x82>
 80061fe:	898a      	ldrh	r2, [r1, #12]
 8006200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006204:	d031      	beq.n	800626a <__ssputs_r+0x7e>
 8006206:	6825      	ldr	r5, [r4, #0]
 8006208:	6909      	ldr	r1, [r1, #16]
 800620a:	1a6f      	subs	r7, r5, r1
 800620c:	6965      	ldr	r5, [r4, #20]
 800620e:	2302      	movs	r3, #2
 8006210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006214:	fb95 f5f3 	sdiv	r5, r5, r3
 8006218:	f109 0301 	add.w	r3, r9, #1
 800621c:	443b      	add	r3, r7
 800621e:	429d      	cmp	r5, r3
 8006220:	bf38      	it	cc
 8006222:	461d      	movcc	r5, r3
 8006224:	0553      	lsls	r3, r2, #21
 8006226:	d530      	bpl.n	800628a <__ssputs_r+0x9e>
 8006228:	4629      	mov	r1, r5
 800622a:	f7ff ff85 	bl	8006138 <_malloc_r>
 800622e:	4606      	mov	r6, r0
 8006230:	b950      	cbnz	r0, 8006248 <__ssputs_r+0x5c>
 8006232:	230c      	movs	r3, #12
 8006234:	f8ca 3000 	str.w	r3, [sl]
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006248:	463a      	mov	r2, r7
 800624a:	6921      	ldr	r1, [r4, #16]
 800624c:	f000 fc92 	bl	8006b74 <memcpy>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	6126      	str	r6, [r4, #16]
 800625e:	6165      	str	r5, [r4, #20]
 8006260:	443e      	add	r6, r7
 8006262:	1bed      	subs	r5, r5, r7
 8006264:	6026      	str	r6, [r4, #0]
 8006266:	60a5      	str	r5, [r4, #8]
 8006268:	464e      	mov	r6, r9
 800626a:	454e      	cmp	r6, r9
 800626c:	d900      	bls.n	8006270 <__ssputs_r+0x84>
 800626e:	464e      	mov	r6, r9
 8006270:	4632      	mov	r2, r6
 8006272:	4641      	mov	r1, r8
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	f000 fc88 	bl	8006b8a <memmove>
 800627a:	68a3      	ldr	r3, [r4, #8]
 800627c:	1b9b      	subs	r3, r3, r6
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	441e      	add	r6, r3
 8006284:	6026      	str	r6, [r4, #0]
 8006286:	2000      	movs	r0, #0
 8006288:	e7dc      	b.n	8006244 <__ssputs_r+0x58>
 800628a:	462a      	mov	r2, r5
 800628c:	f000 fc98 	bl	8006bc0 <_realloc_r>
 8006290:	4606      	mov	r6, r0
 8006292:	2800      	cmp	r0, #0
 8006294:	d1e2      	bne.n	800625c <__ssputs_r+0x70>
 8006296:	6921      	ldr	r1, [r4, #16]
 8006298:	4650      	mov	r0, sl
 800629a:	f7ff feff 	bl	800609c <_free_r>
 800629e:	e7c8      	b.n	8006232 <__ssputs_r+0x46>

080062a0 <_svfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	461d      	mov	r5, r3
 80062a6:	898b      	ldrh	r3, [r1, #12]
 80062a8:	061f      	lsls	r7, r3, #24
 80062aa:	b09d      	sub	sp, #116	; 0x74
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d50f      	bpl.n	80062d4 <_svfiprintf_r+0x34>
 80062b4:	690b      	ldr	r3, [r1, #16]
 80062b6:	b96b      	cbnz	r3, 80062d4 <_svfiprintf_r+0x34>
 80062b8:	2140      	movs	r1, #64	; 0x40
 80062ba:	f7ff ff3d 	bl	8006138 <_malloc_r>
 80062be:	6020      	str	r0, [r4, #0]
 80062c0:	6120      	str	r0, [r4, #16]
 80062c2:	b928      	cbnz	r0, 80062d0 <_svfiprintf_r+0x30>
 80062c4:	230c      	movs	r3, #12
 80062c6:	f8c8 3000 	str.w	r3, [r8]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	e0c8      	b.n	8006462 <_svfiprintf_r+0x1c2>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	6163      	str	r3, [r4, #20]
 80062d4:	2300      	movs	r3, #0
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	2320      	movs	r3, #32
 80062da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062de:	2330      	movs	r3, #48	; 0x30
 80062e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062e4:	9503      	str	r5, [sp, #12]
 80062e6:	f04f 0b01 	mov.w	fp, #1
 80062ea:	4637      	mov	r7, r6
 80062ec:	463d      	mov	r5, r7
 80062ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062f2:	b10b      	cbz	r3, 80062f8 <_svfiprintf_r+0x58>
 80062f4:	2b25      	cmp	r3, #37	; 0x25
 80062f6:	d13e      	bne.n	8006376 <_svfiprintf_r+0xd6>
 80062f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80062fc:	d00b      	beq.n	8006316 <_svfiprintf_r+0x76>
 80062fe:	4653      	mov	r3, sl
 8006300:	4632      	mov	r2, r6
 8006302:	4621      	mov	r1, r4
 8006304:	4640      	mov	r0, r8
 8006306:	f7ff ff71 	bl	80061ec <__ssputs_r>
 800630a:	3001      	adds	r0, #1
 800630c:	f000 80a4 	beq.w	8006458 <_svfiprintf_r+0x1b8>
 8006310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006312:	4453      	add	r3, sl
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	783b      	ldrb	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 809d 	beq.w	8006458 <_svfiprintf_r+0x1b8>
 800631e:	2300      	movs	r3, #0
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	9307      	str	r3, [sp, #28]
 800632c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006330:	931a      	str	r3, [sp, #104]	; 0x68
 8006332:	462f      	mov	r7, r5
 8006334:	2205      	movs	r2, #5
 8006336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800633a:	4850      	ldr	r0, [pc, #320]	; (800647c <_svfiprintf_r+0x1dc>)
 800633c:	f7f9 ff58 	bl	80001f0 <memchr>
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	b9d0      	cbnz	r0, 800637a <_svfiprintf_r+0xda>
 8006344:	06d9      	lsls	r1, r3, #27
 8006346:	bf44      	itt	mi
 8006348:	2220      	movmi	r2, #32
 800634a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800634e:	071a      	lsls	r2, r3, #28
 8006350:	bf44      	itt	mi
 8006352:	222b      	movmi	r2, #43	; 0x2b
 8006354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006358:	782a      	ldrb	r2, [r5, #0]
 800635a:	2a2a      	cmp	r2, #42	; 0x2a
 800635c:	d015      	beq.n	800638a <_svfiprintf_r+0xea>
 800635e:	9a07      	ldr	r2, [sp, #28]
 8006360:	462f      	mov	r7, r5
 8006362:	2000      	movs	r0, #0
 8006364:	250a      	movs	r5, #10
 8006366:	4639      	mov	r1, r7
 8006368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636c:	3b30      	subs	r3, #48	; 0x30
 800636e:	2b09      	cmp	r3, #9
 8006370:	d94d      	bls.n	800640e <_svfiprintf_r+0x16e>
 8006372:	b1b8      	cbz	r0, 80063a4 <_svfiprintf_r+0x104>
 8006374:	e00f      	b.n	8006396 <_svfiprintf_r+0xf6>
 8006376:	462f      	mov	r7, r5
 8006378:	e7b8      	b.n	80062ec <_svfiprintf_r+0x4c>
 800637a:	4a40      	ldr	r2, [pc, #256]	; (800647c <_svfiprintf_r+0x1dc>)
 800637c:	1a80      	subs	r0, r0, r2
 800637e:	fa0b f000 	lsl.w	r0, fp, r0
 8006382:	4318      	orrs	r0, r3
 8006384:	9004      	str	r0, [sp, #16]
 8006386:	463d      	mov	r5, r7
 8006388:	e7d3      	b.n	8006332 <_svfiprintf_r+0x92>
 800638a:	9a03      	ldr	r2, [sp, #12]
 800638c:	1d11      	adds	r1, r2, #4
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	9103      	str	r1, [sp, #12]
 8006392:	2a00      	cmp	r2, #0
 8006394:	db01      	blt.n	800639a <_svfiprintf_r+0xfa>
 8006396:	9207      	str	r2, [sp, #28]
 8006398:	e004      	b.n	80063a4 <_svfiprintf_r+0x104>
 800639a:	4252      	negs	r2, r2
 800639c:	f043 0302 	orr.w	r3, r3, #2
 80063a0:	9207      	str	r2, [sp, #28]
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	783b      	ldrb	r3, [r7, #0]
 80063a6:	2b2e      	cmp	r3, #46	; 0x2e
 80063a8:	d10c      	bne.n	80063c4 <_svfiprintf_r+0x124>
 80063aa:	787b      	ldrb	r3, [r7, #1]
 80063ac:	2b2a      	cmp	r3, #42	; 0x2a
 80063ae:	d133      	bne.n	8006418 <_svfiprintf_r+0x178>
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	1d1a      	adds	r2, r3, #4
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	9203      	str	r2, [sp, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bfb8      	it	lt
 80063bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80063c0:	3702      	adds	r7, #2
 80063c2:	9305      	str	r3, [sp, #20]
 80063c4:	4d2e      	ldr	r5, [pc, #184]	; (8006480 <_svfiprintf_r+0x1e0>)
 80063c6:	7839      	ldrb	r1, [r7, #0]
 80063c8:	2203      	movs	r2, #3
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7f9 ff10 	bl	80001f0 <memchr>
 80063d0:	b138      	cbz	r0, 80063e2 <_svfiprintf_r+0x142>
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	1b40      	subs	r0, r0, r5
 80063d6:	fa03 f000 	lsl.w	r0, r3, r0
 80063da:	9b04      	ldr	r3, [sp, #16]
 80063dc:	4303      	orrs	r3, r0
 80063de:	3701      	adds	r7, #1
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	7839      	ldrb	r1, [r7, #0]
 80063e4:	4827      	ldr	r0, [pc, #156]	; (8006484 <_svfiprintf_r+0x1e4>)
 80063e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ea:	2206      	movs	r2, #6
 80063ec:	1c7e      	adds	r6, r7, #1
 80063ee:	f7f9 feff 	bl	80001f0 <memchr>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d038      	beq.n	8006468 <_svfiprintf_r+0x1c8>
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <_svfiprintf_r+0x1e8>)
 80063f8:	bb13      	cbnz	r3, 8006440 <_svfiprintf_r+0x1a0>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	3307      	adds	r3, #7
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	3308      	adds	r3, #8
 8006404:	9303      	str	r3, [sp, #12]
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	444b      	add	r3, r9
 800640a:	9309      	str	r3, [sp, #36]	; 0x24
 800640c:	e76d      	b.n	80062ea <_svfiprintf_r+0x4a>
 800640e:	fb05 3202 	mla	r2, r5, r2, r3
 8006412:	2001      	movs	r0, #1
 8006414:	460f      	mov	r7, r1
 8006416:	e7a6      	b.n	8006366 <_svfiprintf_r+0xc6>
 8006418:	2300      	movs	r3, #0
 800641a:	3701      	adds	r7, #1
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	4619      	mov	r1, r3
 8006420:	250a      	movs	r5, #10
 8006422:	4638      	mov	r0, r7
 8006424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006428:	3a30      	subs	r2, #48	; 0x30
 800642a:	2a09      	cmp	r2, #9
 800642c:	d903      	bls.n	8006436 <_svfiprintf_r+0x196>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0c8      	beq.n	80063c4 <_svfiprintf_r+0x124>
 8006432:	9105      	str	r1, [sp, #20]
 8006434:	e7c6      	b.n	80063c4 <_svfiprintf_r+0x124>
 8006436:	fb05 2101 	mla	r1, r5, r1, r2
 800643a:	2301      	movs	r3, #1
 800643c:	4607      	mov	r7, r0
 800643e:	e7f0      	b.n	8006422 <_svfiprintf_r+0x182>
 8006440:	ab03      	add	r3, sp, #12
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	4622      	mov	r2, r4
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <_svfiprintf_r+0x1ec>)
 8006448:	a904      	add	r1, sp, #16
 800644a:	4640      	mov	r0, r8
 800644c:	f3af 8000 	nop.w
 8006450:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006454:	4681      	mov	r9, r0
 8006456:	d1d6      	bne.n	8006406 <_svfiprintf_r+0x166>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	065b      	lsls	r3, r3, #25
 800645c:	f53f af35 	bmi.w	80062ca <_svfiprintf_r+0x2a>
 8006460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006462:	b01d      	add	sp, #116	; 0x74
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4622      	mov	r2, r4
 800646e:	4b07      	ldr	r3, [pc, #28]	; (800648c <_svfiprintf_r+0x1ec>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	4640      	mov	r0, r8
 8006474:	f000 f9c2 	bl	80067fc <_printf_i>
 8006478:	e7ea      	b.n	8006450 <_svfiprintf_r+0x1b0>
 800647a:	bf00      	nop
 800647c:	08006e20 	.word	0x08006e20
 8006480:	08006e26 	.word	0x08006e26
 8006484:	08006e2a 	.word	0x08006e2a
 8006488:	00000000 	.word	0x00000000
 800648c:	080061ed 	.word	0x080061ed

08006490 <__sfputc_r>:
 8006490:	6893      	ldr	r3, [r2, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	b410      	push	{r4}
 8006498:	6093      	str	r3, [r2, #8]
 800649a:	da08      	bge.n	80064ae <__sfputc_r+0x1e>
 800649c:	6994      	ldr	r4, [r2, #24]
 800649e:	42a3      	cmp	r3, r4
 80064a0:	db01      	blt.n	80064a6 <__sfputc_r+0x16>
 80064a2:	290a      	cmp	r1, #10
 80064a4:	d103      	bne.n	80064ae <__sfputc_r+0x1e>
 80064a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064aa:	f7ff bb59 	b.w	8005b60 <__swbuf_r>
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	1c58      	adds	r0, r3, #1
 80064b2:	6010      	str	r0, [r2, #0]
 80064b4:	7019      	strb	r1, [r3, #0]
 80064b6:	4608      	mov	r0, r1
 80064b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064bc:	4770      	bx	lr

080064be <__sfputs_r>:
 80064be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c0:	4606      	mov	r6, r0
 80064c2:	460f      	mov	r7, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	18d5      	adds	r5, r2, r3
 80064c8:	42ac      	cmp	r4, r5
 80064ca:	d101      	bne.n	80064d0 <__sfputs_r+0x12>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e007      	b.n	80064e0 <__sfputs_r+0x22>
 80064d0:	463a      	mov	r2, r7
 80064d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ffda 	bl	8006490 <__sfputc_r>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d1f3      	bne.n	80064c8 <__sfputs_r+0xa>
 80064e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064e4 <_vfiprintf_r>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	460c      	mov	r4, r1
 80064ea:	b09d      	sub	sp, #116	; 0x74
 80064ec:	4617      	mov	r7, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	4606      	mov	r6, r0
 80064f2:	b118      	cbz	r0, 80064fc <_vfiprintf_r+0x18>
 80064f4:	6983      	ldr	r3, [r0, #24]
 80064f6:	b90b      	cbnz	r3, 80064fc <_vfiprintf_r+0x18>
 80064f8:	f7ff fce2 	bl	8005ec0 <__sinit>
 80064fc:	4b7c      	ldr	r3, [pc, #496]	; (80066f0 <_vfiprintf_r+0x20c>)
 80064fe:	429c      	cmp	r4, r3
 8006500:	d158      	bne.n	80065b4 <_vfiprintf_r+0xd0>
 8006502:	6874      	ldr	r4, [r6, #4]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	0718      	lsls	r0, r3, #28
 8006508:	d55e      	bpl.n	80065c8 <_vfiprintf_r+0xe4>
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05b      	beq.n	80065c8 <_vfiprintf_r+0xe4>
 8006510:	2300      	movs	r3, #0
 8006512:	9309      	str	r3, [sp, #36]	; 0x24
 8006514:	2320      	movs	r3, #32
 8006516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800651a:	2330      	movs	r3, #48	; 0x30
 800651c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006520:	9503      	str	r5, [sp, #12]
 8006522:	f04f 0b01 	mov.w	fp, #1
 8006526:	46b8      	mov	r8, r7
 8006528:	4645      	mov	r5, r8
 800652a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800652e:	b10b      	cbz	r3, 8006534 <_vfiprintf_r+0x50>
 8006530:	2b25      	cmp	r3, #37	; 0x25
 8006532:	d154      	bne.n	80065de <_vfiprintf_r+0xfa>
 8006534:	ebb8 0a07 	subs.w	sl, r8, r7
 8006538:	d00b      	beq.n	8006552 <_vfiprintf_r+0x6e>
 800653a:	4653      	mov	r3, sl
 800653c:	463a      	mov	r2, r7
 800653e:	4621      	mov	r1, r4
 8006540:	4630      	mov	r0, r6
 8006542:	f7ff ffbc 	bl	80064be <__sfputs_r>
 8006546:	3001      	adds	r0, #1
 8006548:	f000 80c2 	beq.w	80066d0 <_vfiprintf_r+0x1ec>
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	4453      	add	r3, sl
 8006550:	9309      	str	r3, [sp, #36]	; 0x24
 8006552:	f898 3000 	ldrb.w	r3, [r8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80ba 	beq.w	80066d0 <_vfiprintf_r+0x1ec>
 800655c:	2300      	movs	r3, #0
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006566:	9304      	str	r3, [sp, #16]
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656e:	931a      	str	r3, [sp, #104]	; 0x68
 8006570:	46a8      	mov	r8, r5
 8006572:	2205      	movs	r2, #5
 8006574:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006578:	485e      	ldr	r0, [pc, #376]	; (80066f4 <_vfiprintf_r+0x210>)
 800657a:	f7f9 fe39 	bl	80001f0 <memchr>
 800657e:	9b04      	ldr	r3, [sp, #16]
 8006580:	bb78      	cbnz	r0, 80065e2 <_vfiprintf_r+0xfe>
 8006582:	06d9      	lsls	r1, r3, #27
 8006584:	bf44      	itt	mi
 8006586:	2220      	movmi	r2, #32
 8006588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800658c:	071a      	lsls	r2, r3, #28
 800658e:	bf44      	itt	mi
 8006590:	222b      	movmi	r2, #43	; 0x2b
 8006592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006596:	782a      	ldrb	r2, [r5, #0]
 8006598:	2a2a      	cmp	r2, #42	; 0x2a
 800659a:	d02a      	beq.n	80065f2 <_vfiprintf_r+0x10e>
 800659c:	9a07      	ldr	r2, [sp, #28]
 800659e:	46a8      	mov	r8, r5
 80065a0:	2000      	movs	r0, #0
 80065a2:	250a      	movs	r5, #10
 80065a4:	4641      	mov	r1, r8
 80065a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065aa:	3b30      	subs	r3, #48	; 0x30
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d969      	bls.n	8006684 <_vfiprintf_r+0x1a0>
 80065b0:	b360      	cbz	r0, 800660c <_vfiprintf_r+0x128>
 80065b2:	e024      	b.n	80065fe <_vfiprintf_r+0x11a>
 80065b4:	4b50      	ldr	r3, [pc, #320]	; (80066f8 <_vfiprintf_r+0x214>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	d101      	bne.n	80065be <_vfiprintf_r+0xda>
 80065ba:	68b4      	ldr	r4, [r6, #8]
 80065bc:	e7a2      	b.n	8006504 <_vfiprintf_r+0x20>
 80065be:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <_vfiprintf_r+0x218>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	bf08      	it	eq
 80065c4:	68f4      	ldreq	r4, [r6, #12]
 80065c6:	e79d      	b.n	8006504 <_vfiprintf_r+0x20>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff fb1a 	bl	8005c04 <__swsetup_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d09d      	beq.n	8006510 <_vfiprintf_r+0x2c>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	b01d      	add	sp, #116	; 0x74
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	46a8      	mov	r8, r5
 80065e0:	e7a2      	b.n	8006528 <_vfiprintf_r+0x44>
 80065e2:	4a44      	ldr	r2, [pc, #272]	; (80066f4 <_vfiprintf_r+0x210>)
 80065e4:	1a80      	subs	r0, r0, r2
 80065e6:	fa0b f000 	lsl.w	r0, fp, r0
 80065ea:	4318      	orrs	r0, r3
 80065ec:	9004      	str	r0, [sp, #16]
 80065ee:	4645      	mov	r5, r8
 80065f0:	e7be      	b.n	8006570 <_vfiprintf_r+0x8c>
 80065f2:	9a03      	ldr	r2, [sp, #12]
 80065f4:	1d11      	adds	r1, r2, #4
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	9103      	str	r1, [sp, #12]
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	db01      	blt.n	8006602 <_vfiprintf_r+0x11e>
 80065fe:	9207      	str	r2, [sp, #28]
 8006600:	e004      	b.n	800660c <_vfiprintf_r+0x128>
 8006602:	4252      	negs	r2, r2
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	9207      	str	r2, [sp, #28]
 800660a:	9304      	str	r3, [sp, #16]
 800660c:	f898 3000 	ldrb.w	r3, [r8]
 8006610:	2b2e      	cmp	r3, #46	; 0x2e
 8006612:	d10e      	bne.n	8006632 <_vfiprintf_r+0x14e>
 8006614:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006618:	2b2a      	cmp	r3, #42	; 0x2a
 800661a:	d138      	bne.n	800668e <_vfiprintf_r+0x1aa>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	1d1a      	adds	r2, r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	9203      	str	r2, [sp, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfb8      	it	lt
 8006628:	f04f 33ff 	movlt.w	r3, #4294967295
 800662c:	f108 0802 	add.w	r8, r8, #2
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	4d33      	ldr	r5, [pc, #204]	; (8006700 <_vfiprintf_r+0x21c>)
 8006634:	f898 1000 	ldrb.w	r1, [r8]
 8006638:	2203      	movs	r2, #3
 800663a:	4628      	mov	r0, r5
 800663c:	f7f9 fdd8 	bl	80001f0 <memchr>
 8006640:	b140      	cbz	r0, 8006654 <_vfiprintf_r+0x170>
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	1b40      	subs	r0, r0, r5
 8006646:	fa03 f000 	lsl.w	r0, r3, r0
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	4303      	orrs	r3, r0
 800664e:	f108 0801 	add.w	r8, r8, #1
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	f898 1000 	ldrb.w	r1, [r8]
 8006658:	482a      	ldr	r0, [pc, #168]	; (8006704 <_vfiprintf_r+0x220>)
 800665a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800665e:	2206      	movs	r2, #6
 8006660:	f108 0701 	add.w	r7, r8, #1
 8006664:	f7f9 fdc4 	bl	80001f0 <memchr>
 8006668:	2800      	cmp	r0, #0
 800666a:	d037      	beq.n	80066dc <_vfiprintf_r+0x1f8>
 800666c:	4b26      	ldr	r3, [pc, #152]	; (8006708 <_vfiprintf_r+0x224>)
 800666e:	bb1b      	cbnz	r3, 80066b8 <_vfiprintf_r+0x1d4>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	3307      	adds	r3, #7
 8006674:	f023 0307 	bic.w	r3, r3, #7
 8006678:	3308      	adds	r3, #8
 800667a:	9303      	str	r3, [sp, #12]
 800667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667e:	444b      	add	r3, r9
 8006680:	9309      	str	r3, [sp, #36]	; 0x24
 8006682:	e750      	b.n	8006526 <_vfiprintf_r+0x42>
 8006684:	fb05 3202 	mla	r2, r5, r2, r3
 8006688:	2001      	movs	r0, #1
 800668a:	4688      	mov	r8, r1
 800668c:	e78a      	b.n	80065a4 <_vfiprintf_r+0xc0>
 800668e:	2300      	movs	r3, #0
 8006690:	f108 0801 	add.w	r8, r8, #1
 8006694:	9305      	str	r3, [sp, #20]
 8006696:	4619      	mov	r1, r3
 8006698:	250a      	movs	r5, #10
 800669a:	4640      	mov	r0, r8
 800669c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a0:	3a30      	subs	r2, #48	; 0x30
 80066a2:	2a09      	cmp	r2, #9
 80066a4:	d903      	bls.n	80066ae <_vfiprintf_r+0x1ca>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0c3      	beq.n	8006632 <_vfiprintf_r+0x14e>
 80066aa:	9105      	str	r1, [sp, #20]
 80066ac:	e7c1      	b.n	8006632 <_vfiprintf_r+0x14e>
 80066ae:	fb05 2101 	mla	r1, r5, r1, r2
 80066b2:	2301      	movs	r3, #1
 80066b4:	4680      	mov	r8, r0
 80066b6:	e7f0      	b.n	800669a <_vfiprintf_r+0x1b6>
 80066b8:	ab03      	add	r3, sp, #12
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4622      	mov	r2, r4
 80066be:	4b13      	ldr	r3, [pc, #76]	; (800670c <_vfiprintf_r+0x228>)
 80066c0:	a904      	add	r1, sp, #16
 80066c2:	4630      	mov	r0, r6
 80066c4:	f3af 8000 	nop.w
 80066c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066cc:	4681      	mov	r9, r0
 80066ce:	d1d5      	bne.n	800667c <_vfiprintf_r+0x198>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	065b      	lsls	r3, r3, #25
 80066d4:	f53f af7e 	bmi.w	80065d4 <_vfiprintf_r+0xf0>
 80066d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066da:	e77d      	b.n	80065d8 <_vfiprintf_r+0xf4>
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4622      	mov	r2, r4
 80066e2:	4b0a      	ldr	r3, [pc, #40]	; (800670c <_vfiprintf_r+0x228>)
 80066e4:	a904      	add	r1, sp, #16
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f888 	bl	80067fc <_printf_i>
 80066ec:	e7ec      	b.n	80066c8 <_vfiprintf_r+0x1e4>
 80066ee:	bf00      	nop
 80066f0:	08006de0 	.word	0x08006de0
 80066f4:	08006e20 	.word	0x08006e20
 80066f8:	08006e00 	.word	0x08006e00
 80066fc:	08006dc0 	.word	0x08006dc0
 8006700:	08006e26 	.word	0x08006e26
 8006704:	08006e2a 	.word	0x08006e2a
 8006708:	00000000 	.word	0x00000000
 800670c:	080064bf 	.word	0x080064bf

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4691      	mov	r9, r2
 8006716:	461f      	mov	r7, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006720:	4293      	cmp	r3, r2
 8006722:	bfb8      	it	lt
 8006724:	4613      	movlt	r3, r2
 8006726:	f8c9 3000 	str.w	r3, [r9]
 800672a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800672e:	4606      	mov	r6, r0
 8006730:	460c      	mov	r4, r1
 8006732:	b112      	cbz	r2, 800673a <_printf_common+0x2a>
 8006734:	3301      	adds	r3, #1
 8006736:	f8c9 3000 	str.w	r3, [r9]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	0699      	lsls	r1, r3, #26
 800673e:	bf42      	ittt	mi
 8006740:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006744:	3302      	addmi	r3, #2
 8006746:	f8c9 3000 	strmi.w	r3, [r9]
 800674a:	6825      	ldr	r5, [r4, #0]
 800674c:	f015 0506 	ands.w	r5, r5, #6
 8006750:	d107      	bne.n	8006762 <_printf_common+0x52>
 8006752:	f104 0a19 	add.w	sl, r4, #25
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	f8d9 2000 	ldr.w	r2, [r9]
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	42ab      	cmp	r3, r5
 8006760:	dc28      	bgt.n	80067b4 <_printf_common+0xa4>
 8006762:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	3300      	adds	r3, #0
 800676a:	bf18      	it	ne
 800676c:	2301      	movne	r3, #1
 800676e:	0692      	lsls	r2, r2, #26
 8006770:	d42d      	bmi.n	80067ce <_printf_common+0xbe>
 8006772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006776:	4639      	mov	r1, r7
 8006778:	4630      	mov	r0, r6
 800677a:	47c0      	blx	r8
 800677c:	3001      	adds	r0, #1
 800677e:	d020      	beq.n	80067c2 <_printf_common+0xb2>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	68e5      	ldr	r5, [r4, #12]
 8006784:	f8d9 2000 	ldr.w	r2, [r9]
 8006788:	f003 0306 	and.w	r3, r3, #6
 800678c:	2b04      	cmp	r3, #4
 800678e:	bf08      	it	eq
 8006790:	1aad      	subeq	r5, r5, r2
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	bf0c      	ite	eq
 8006798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800679c:	2500      	movne	r5, #0
 800679e:	4293      	cmp	r3, r2
 80067a0:	bfc4      	itt	gt
 80067a2:	1a9b      	subgt	r3, r3, r2
 80067a4:	18ed      	addgt	r5, r5, r3
 80067a6:	f04f 0900 	mov.w	r9, #0
 80067aa:	341a      	adds	r4, #26
 80067ac:	454d      	cmp	r5, r9
 80067ae:	d11a      	bne.n	80067e6 <_printf_common+0xd6>
 80067b0:	2000      	movs	r0, #0
 80067b2:	e008      	b.n	80067c6 <_printf_common+0xb6>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4652      	mov	r2, sl
 80067b8:	4639      	mov	r1, r7
 80067ba:	4630      	mov	r0, r6
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d103      	bne.n	80067ca <_printf_common+0xba>
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ca:	3501      	adds	r5, #1
 80067cc:	e7c3      	b.n	8006756 <_printf_common+0x46>
 80067ce:	18e1      	adds	r1, r4, r3
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	2030      	movs	r0, #48	; 0x30
 80067d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d8:	4422      	add	r2, r4
 80067da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067e2:	3302      	adds	r3, #2
 80067e4:	e7c5      	b.n	8006772 <_printf_common+0x62>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4622      	mov	r2, r4
 80067ea:	4639      	mov	r1, r7
 80067ec:	4630      	mov	r0, r6
 80067ee:	47c0      	blx	r8
 80067f0:	3001      	adds	r0, #1
 80067f2:	d0e6      	beq.n	80067c2 <_printf_common+0xb2>
 80067f4:	f109 0901 	add.w	r9, r9, #1
 80067f8:	e7d8      	b.n	80067ac <_printf_common+0x9c>
	...

080067fc <_printf_i>:
 80067fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006800:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006804:	460c      	mov	r4, r1
 8006806:	7e09      	ldrb	r1, [r1, #24]
 8006808:	b085      	sub	sp, #20
 800680a:	296e      	cmp	r1, #110	; 0x6e
 800680c:	4617      	mov	r7, r2
 800680e:	4606      	mov	r6, r0
 8006810:	4698      	mov	r8, r3
 8006812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006814:	f000 80b3 	beq.w	800697e <_printf_i+0x182>
 8006818:	d822      	bhi.n	8006860 <_printf_i+0x64>
 800681a:	2963      	cmp	r1, #99	; 0x63
 800681c:	d036      	beq.n	800688c <_printf_i+0x90>
 800681e:	d80a      	bhi.n	8006836 <_printf_i+0x3a>
 8006820:	2900      	cmp	r1, #0
 8006822:	f000 80b9 	beq.w	8006998 <_printf_i+0x19c>
 8006826:	2958      	cmp	r1, #88	; 0x58
 8006828:	f000 8083 	beq.w	8006932 <_printf_i+0x136>
 800682c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006830:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006834:	e032      	b.n	800689c <_printf_i+0xa0>
 8006836:	2964      	cmp	r1, #100	; 0x64
 8006838:	d001      	beq.n	800683e <_printf_i+0x42>
 800683a:	2969      	cmp	r1, #105	; 0x69
 800683c:	d1f6      	bne.n	800682c <_printf_i+0x30>
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	6813      	ldr	r3, [r2, #0]
 8006842:	0605      	lsls	r5, r0, #24
 8006844:	f103 0104 	add.w	r1, r3, #4
 8006848:	d52a      	bpl.n	80068a0 <_printf_i+0xa4>
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6011      	str	r1, [r2, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	da03      	bge.n	800685a <_printf_i+0x5e>
 8006852:	222d      	movs	r2, #45	; 0x2d
 8006854:	425b      	negs	r3, r3
 8006856:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800685a:	486f      	ldr	r0, [pc, #444]	; (8006a18 <_printf_i+0x21c>)
 800685c:	220a      	movs	r2, #10
 800685e:	e039      	b.n	80068d4 <_printf_i+0xd8>
 8006860:	2973      	cmp	r1, #115	; 0x73
 8006862:	f000 809d 	beq.w	80069a0 <_printf_i+0x1a4>
 8006866:	d808      	bhi.n	800687a <_printf_i+0x7e>
 8006868:	296f      	cmp	r1, #111	; 0x6f
 800686a:	d020      	beq.n	80068ae <_printf_i+0xb2>
 800686c:	2970      	cmp	r1, #112	; 0x70
 800686e:	d1dd      	bne.n	800682c <_printf_i+0x30>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	f043 0320 	orr.w	r3, r3, #32
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	e003      	b.n	8006882 <_printf_i+0x86>
 800687a:	2975      	cmp	r1, #117	; 0x75
 800687c:	d017      	beq.n	80068ae <_printf_i+0xb2>
 800687e:	2978      	cmp	r1, #120	; 0x78
 8006880:	d1d4      	bne.n	800682c <_printf_i+0x30>
 8006882:	2378      	movs	r3, #120	; 0x78
 8006884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006888:	4864      	ldr	r0, [pc, #400]	; (8006a1c <_printf_i+0x220>)
 800688a:	e055      	b.n	8006938 <_printf_i+0x13c>
 800688c:	6813      	ldr	r3, [r2, #0]
 800688e:	1d19      	adds	r1, r3, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6011      	str	r1, [r2, #0]
 8006894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800689c:	2301      	movs	r3, #1
 800689e:	e08c      	b.n	80069ba <_printf_i+0x1be>
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6011      	str	r1, [r2, #0]
 80068a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068a8:	bf18      	it	ne
 80068aa:	b21b      	sxthne	r3, r3
 80068ac:	e7cf      	b.n	800684e <_printf_i+0x52>
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	6825      	ldr	r5, [r4, #0]
 80068b2:	1d18      	adds	r0, r3, #4
 80068b4:	6010      	str	r0, [r2, #0]
 80068b6:	0628      	lsls	r0, r5, #24
 80068b8:	d501      	bpl.n	80068be <_printf_i+0xc2>
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	e002      	b.n	80068c4 <_printf_i+0xc8>
 80068be:	0668      	lsls	r0, r5, #25
 80068c0:	d5fb      	bpl.n	80068ba <_printf_i+0xbe>
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	4854      	ldr	r0, [pc, #336]	; (8006a18 <_printf_i+0x21c>)
 80068c6:	296f      	cmp	r1, #111	; 0x6f
 80068c8:	bf14      	ite	ne
 80068ca:	220a      	movne	r2, #10
 80068cc:	2208      	moveq	r2, #8
 80068ce:	2100      	movs	r1, #0
 80068d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068d4:	6865      	ldr	r5, [r4, #4]
 80068d6:	60a5      	str	r5, [r4, #8]
 80068d8:	2d00      	cmp	r5, #0
 80068da:	f2c0 8095 	blt.w	8006a08 <_printf_i+0x20c>
 80068de:	6821      	ldr	r1, [r4, #0]
 80068e0:	f021 0104 	bic.w	r1, r1, #4
 80068e4:	6021      	str	r1, [r4, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d13d      	bne.n	8006966 <_printf_i+0x16a>
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	f040 808e 	bne.w	8006a0c <_printf_i+0x210>
 80068f0:	4665      	mov	r5, ip
 80068f2:	2a08      	cmp	r2, #8
 80068f4:	d10b      	bne.n	800690e <_printf_i+0x112>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d508      	bpl.n	800690e <_printf_i+0x112>
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	6862      	ldr	r2, [r4, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	bfde      	ittt	le
 8006904:	2330      	movle	r3, #48	; 0x30
 8006906:	f805 3c01 	strble.w	r3, [r5, #-1]
 800690a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800690e:	ebac 0305 	sub.w	r3, ip, r5
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	f8cd 8000 	str.w	r8, [sp]
 8006918:	463b      	mov	r3, r7
 800691a:	aa03      	add	r2, sp, #12
 800691c:	4621      	mov	r1, r4
 800691e:	4630      	mov	r0, r6
 8006920:	f7ff fef6 	bl	8006710 <_printf_common>
 8006924:	3001      	adds	r0, #1
 8006926:	d14d      	bne.n	80069c4 <_printf_i+0x1c8>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	b005      	add	sp, #20
 800692e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006932:	4839      	ldr	r0, [pc, #228]	; (8006a18 <_printf_i+0x21c>)
 8006934:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006938:	6813      	ldr	r3, [r2, #0]
 800693a:	6821      	ldr	r1, [r4, #0]
 800693c:	1d1d      	adds	r5, r3, #4
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6015      	str	r5, [r2, #0]
 8006942:	060a      	lsls	r2, r1, #24
 8006944:	d50b      	bpl.n	800695e <_printf_i+0x162>
 8006946:	07ca      	lsls	r2, r1, #31
 8006948:	bf44      	itt	mi
 800694a:	f041 0120 	orrmi.w	r1, r1, #32
 800694e:	6021      	strmi	r1, [r4, #0]
 8006950:	b91b      	cbnz	r3, 800695a <_printf_i+0x15e>
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	f022 0220 	bic.w	r2, r2, #32
 8006958:	6022      	str	r2, [r4, #0]
 800695a:	2210      	movs	r2, #16
 800695c:	e7b7      	b.n	80068ce <_printf_i+0xd2>
 800695e:	064d      	lsls	r5, r1, #25
 8006960:	bf48      	it	mi
 8006962:	b29b      	uxthmi	r3, r3
 8006964:	e7ef      	b.n	8006946 <_printf_i+0x14a>
 8006966:	4665      	mov	r5, ip
 8006968:	fbb3 f1f2 	udiv	r1, r3, r2
 800696c:	fb02 3311 	mls	r3, r2, r1, r3
 8006970:	5cc3      	ldrb	r3, [r0, r3]
 8006972:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006976:	460b      	mov	r3, r1
 8006978:	2900      	cmp	r1, #0
 800697a:	d1f5      	bne.n	8006968 <_printf_i+0x16c>
 800697c:	e7b9      	b.n	80068f2 <_printf_i+0xf6>
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	6825      	ldr	r5, [r4, #0]
 8006982:	6961      	ldr	r1, [r4, #20]
 8006984:	1d18      	adds	r0, r3, #4
 8006986:	6010      	str	r0, [r2, #0]
 8006988:	0628      	lsls	r0, r5, #24
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	d501      	bpl.n	8006992 <_printf_i+0x196>
 800698e:	6019      	str	r1, [r3, #0]
 8006990:	e002      	b.n	8006998 <_printf_i+0x19c>
 8006992:	066a      	lsls	r2, r5, #25
 8006994:	d5fb      	bpl.n	800698e <_printf_i+0x192>
 8006996:	8019      	strh	r1, [r3, #0]
 8006998:	2300      	movs	r3, #0
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	4665      	mov	r5, ip
 800699e:	e7b9      	b.n	8006914 <_printf_i+0x118>
 80069a0:	6813      	ldr	r3, [r2, #0]
 80069a2:	1d19      	adds	r1, r3, #4
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	681d      	ldr	r5, [r3, #0]
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	2100      	movs	r1, #0
 80069ac:	4628      	mov	r0, r5
 80069ae:	f7f9 fc1f 	bl	80001f0 <memchr>
 80069b2:	b108      	cbz	r0, 80069b8 <_printf_i+0x1bc>
 80069b4:	1b40      	subs	r0, r0, r5
 80069b6:	6060      	str	r0, [r4, #4]
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	2300      	movs	r3, #0
 80069be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c2:	e7a7      	b.n	8006914 <_printf_i+0x118>
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	462a      	mov	r2, r5
 80069c8:	4639      	mov	r1, r7
 80069ca:	4630      	mov	r0, r6
 80069cc:	47c0      	blx	r8
 80069ce:	3001      	adds	r0, #1
 80069d0:	d0aa      	beq.n	8006928 <_printf_i+0x12c>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	079b      	lsls	r3, r3, #30
 80069d6:	d413      	bmi.n	8006a00 <_printf_i+0x204>
 80069d8:	68e0      	ldr	r0, [r4, #12]
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	4298      	cmp	r0, r3
 80069de:	bfb8      	it	lt
 80069e0:	4618      	movlt	r0, r3
 80069e2:	e7a3      	b.n	800692c <_printf_i+0x130>
 80069e4:	2301      	movs	r3, #1
 80069e6:	464a      	mov	r2, r9
 80069e8:	4639      	mov	r1, r7
 80069ea:	4630      	mov	r0, r6
 80069ec:	47c0      	blx	r8
 80069ee:	3001      	adds	r0, #1
 80069f0:	d09a      	beq.n	8006928 <_printf_i+0x12c>
 80069f2:	3501      	adds	r5, #1
 80069f4:	68e3      	ldr	r3, [r4, #12]
 80069f6:	9a03      	ldr	r2, [sp, #12]
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	42ab      	cmp	r3, r5
 80069fc:	dcf2      	bgt.n	80069e4 <_printf_i+0x1e8>
 80069fe:	e7eb      	b.n	80069d8 <_printf_i+0x1dc>
 8006a00:	2500      	movs	r5, #0
 8006a02:	f104 0919 	add.w	r9, r4, #25
 8006a06:	e7f5      	b.n	80069f4 <_printf_i+0x1f8>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ac      	bne.n	8006966 <_printf_i+0x16a>
 8006a0c:	7803      	ldrb	r3, [r0, #0]
 8006a0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a16:	e76c      	b.n	80068f2 <_printf_i+0xf6>
 8006a18:	08006e31 	.word	0x08006e31
 8006a1c:	08006e42 	.word	0x08006e42

08006a20 <_sbrk_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4c06      	ldr	r4, [pc, #24]	; (8006a3c <_sbrk_r+0x1c>)
 8006a24:	2300      	movs	r3, #0
 8006a26:	4605      	mov	r5, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	f7fa fe5e 	bl	80016ec <_sbrk>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_sbrk_r+0x1a>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_sbrk_r+0x1a>
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000294 	.word	0x20000294

08006a40 <__sread>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	f000 f8e0 	bl	8006c0c <_read_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	bfab      	itete	ge
 8006a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a52:	89a3      	ldrhlt	r3, [r4, #12]
 8006a54:	181b      	addge	r3, r3, r0
 8006a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a5a:	bfac      	ite	ge
 8006a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a5e:	81a3      	strhlt	r3, [r4, #12]
 8006a60:	bd10      	pop	{r4, pc}

08006a62 <__swrite>:
 8006a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	461f      	mov	r7, r3
 8006a68:	898b      	ldrh	r3, [r1, #12]
 8006a6a:	05db      	lsls	r3, r3, #23
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	4616      	mov	r6, r2
 8006a72:	d505      	bpl.n	8006a80 <__swrite+0x1e>
 8006a74:	2302      	movs	r3, #2
 8006a76:	2200      	movs	r2, #0
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	f000 f868 	bl	8006b50 <_lseek_r>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	463b      	mov	r3, r7
 8006a90:	4628      	mov	r0, r5
 8006a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a96:	f000 b817 	b.w	8006ac8 <_write_r>

08006a9a <__sseek>:
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa2:	f000 f855 	bl	8006b50 <_lseek_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	bf15      	itete	ne
 8006aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ab6:	81a3      	strheq	r3, [r4, #12]
 8006ab8:	bf18      	it	ne
 8006aba:	81a3      	strhne	r3, [r4, #12]
 8006abc:	bd10      	pop	{r4, pc}

08006abe <__sclose>:
 8006abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac2:	f000 b813 	b.w	8006aec <_close_r>
	...

08006ac8 <_write_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4c07      	ldr	r4, [pc, #28]	; (8006ae8 <_write_r+0x20>)
 8006acc:	4605      	mov	r5, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fa fdb7 	bl	800164a <_write>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_write_r+0x1e>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_write_r+0x1e>
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20000294 	.word	0x20000294

08006aec <_close_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4c06      	ldr	r4, [pc, #24]	; (8006b08 <_close_r+0x1c>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4605      	mov	r5, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	f7fa fdc3 	bl	8001682 <_close>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_close_r+0x1a>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_close_r+0x1a>
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000294 	.word	0x20000294

08006b0c <_fstat_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4c07      	ldr	r4, [pc, #28]	; (8006b2c <_fstat_r+0x20>)
 8006b10:	2300      	movs	r3, #0
 8006b12:	4605      	mov	r5, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	4611      	mov	r1, r2
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	f7fa fdbe 	bl	800169a <_fstat>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d102      	bne.n	8006b28 <_fstat_r+0x1c>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	b103      	cbz	r3, 8006b28 <_fstat_r+0x1c>
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000294 	.word	0x20000294

08006b30 <_isatty_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4c06      	ldr	r4, [pc, #24]	; (8006b4c <_isatty_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4605      	mov	r5, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	f7fa fdbd 	bl	80016ba <_isatty>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_isatty_r+0x1a>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_isatty_r+0x1a>
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000294 	.word	0x20000294

08006b50 <_lseek_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4c07      	ldr	r4, [pc, #28]	; (8006b70 <_lseek_r+0x20>)
 8006b54:	4605      	mov	r5, r0
 8006b56:	4608      	mov	r0, r1
 8006b58:	4611      	mov	r1, r2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6022      	str	r2, [r4, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f7fa fdb6 	bl	80016d0 <_lseek>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_lseek_r+0x1e>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_lseek_r+0x1e>
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20000294 	.word	0x20000294

08006b74 <memcpy>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	1e43      	subs	r3, r0, #1
 8006b78:	440a      	add	r2, r1
 8006b7a:	4291      	cmp	r1, r2
 8006b7c:	d100      	bne.n	8006b80 <memcpy+0xc>
 8006b7e:	bd10      	pop	{r4, pc}
 8006b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b88:	e7f7      	b.n	8006b7a <memcpy+0x6>

08006b8a <memmove>:
 8006b8a:	4288      	cmp	r0, r1
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	eb01 0302 	add.w	r3, r1, r2
 8006b92:	d807      	bhi.n	8006ba4 <memmove+0x1a>
 8006b94:	1e42      	subs	r2, r0, #1
 8006b96:	4299      	cmp	r1, r3
 8006b98:	d00a      	beq.n	8006bb0 <memmove+0x26>
 8006b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ba2:	e7f8      	b.n	8006b96 <memmove+0xc>
 8006ba4:	4283      	cmp	r3, r0
 8006ba6:	d9f5      	bls.n	8006b94 <memmove+0xa>
 8006ba8:	1881      	adds	r1, r0, r2
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	42d3      	cmn	r3, r2
 8006bae:	d100      	bne.n	8006bb2 <memmove+0x28>
 8006bb0:	bd10      	pop	{r4, pc}
 8006bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bb6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bba:	e7f7      	b.n	8006bac <memmove+0x22>

08006bbc <__malloc_lock>:
 8006bbc:	4770      	bx	lr

08006bbe <__malloc_unlock>:
 8006bbe:	4770      	bx	lr

08006bc0 <_realloc_r>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	460e      	mov	r6, r1
 8006bc8:	b921      	cbnz	r1, 8006bd4 <_realloc_r+0x14>
 8006bca:	4611      	mov	r1, r2
 8006bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bd0:	f7ff bab2 	b.w	8006138 <_malloc_r>
 8006bd4:	b922      	cbnz	r2, 8006be0 <_realloc_r+0x20>
 8006bd6:	f7ff fa61 	bl	800609c <_free_r>
 8006bda:	4625      	mov	r5, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be0:	f000 f826 	bl	8006c30 <_malloc_usable_size_r>
 8006be4:	42a0      	cmp	r0, r4
 8006be6:	d20f      	bcs.n	8006c08 <_realloc_r+0x48>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4638      	mov	r0, r7
 8006bec:	f7ff faa4 	bl	8006138 <_malloc_r>
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d0f2      	beq.n	8006bdc <_realloc_r+0x1c>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	f7ff ffbb 	bl	8006b74 <memcpy>
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff fa4b 	bl	800609c <_free_r>
 8006c06:	e7e9      	b.n	8006bdc <_realloc_r+0x1c>
 8006c08:	4635      	mov	r5, r6
 8006c0a:	e7e7      	b.n	8006bdc <_realloc_r+0x1c>

08006c0c <_read_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4c07      	ldr	r4, [pc, #28]	; (8006c2c <_read_r+0x20>)
 8006c10:	4605      	mov	r5, r0
 8006c12:	4608      	mov	r0, r1
 8006c14:	4611      	mov	r1, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	6022      	str	r2, [r4, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f7fa fcf8 	bl	8001610 <_read>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_read_r+0x1e>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_read_r+0x1e>
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	20000294 	.word	0x20000294

08006c30 <_malloc_usable_size_r>:
 8006c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c34:	1f18      	subs	r0, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfbc      	itt	lt
 8006c3a:	580b      	ldrlt	r3, [r1, r0]
 8006c3c:	18c0      	addlt	r0, r0, r3
 8006c3e:	4770      	bx	lr

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
